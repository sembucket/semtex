/*
 * COMM-MPI: Driver for MPI communications
 *
 * RCS Information
 * ---------------
 * $Author$
 * $Date$
 * $Revision$
 * ------------------------------------------------------------------------- */

#include "comm/comm.h"
#include <mpi.h>

/* ------------------------------------------------------------------------- */

int comm_init (int *argc, char **argv[])
{ 
  MPI_Init(argc, argv);
	
  MPI_Comm_size(MPI_COMM_WORLD,&npes);
  MPI_Comm_rank(MPI_COMM_WORLD,&rank);
  return 0;
}

int comm_exit(void) { 
  MPI_Finalize();
}

int comm_size() { return npes; }
int comm_rank() { return rank; }

double comm_time() { return MPI_Wtime(); }
double comm_tick() { return MPI_Wtick(); }

/* ------------------------------------------------------------------------- */

int comm_sync() {
  return MPI_Barrier(MPI_COMM_WORLD);
}

/* ------------------------------------------------------------------------- */

int comm_bcast (void *buf, size_t size, int root) {
  return MPI_Bcast (buf, size, MPI_CHAR, root, MPI_COMM_WORLD);
}

int comm_send (int type, const void *buf, size_t size, int node) {
  return MPI_Send (buf, size, MPI_CHAR, node, type, MPI_COMM_WORLD);
}

int comm_recv (int type, void *buf, size_t size) {
  MPI_Status status;
  return MPI_Recv (buf, size, MPI_CHAR, MPI_ANY_SOURCE, type, 
		   MPI_COMM_WORLD, &status);
}

int comm_xchg (int type, void *sbuf, void *rbuf, size_t size, int node) {
  MPI_Status status;
  return MPI_Sendrecv (sbuf, size, MPI_CHAR, node, type,
		       rbuf, size, MPI_CHAR, node, type, 
		       MPI_COMM_WORLD, &status);
}

int comm_sendx (int type, const void *buf, size_t size, int node) {
  MPI_Request request;	
  MPI_Isend (buf, size, MPI_CHAR, node, type, MPI_COMM_WORLD, &request);
  return (int) request;
}

int comm_recvx (int type, void *buf, size_t size) {
  MPI_Request request;
  MPI_Irecv (buf, size, MPI_CHAR, MPI_ANY_SOURCE, type, 
	     MPI_COMM_WORLD, &request);
  return (int) request;
}

int comm_wait (int tag) {
  MPI_Status  status;
  MPI_Request request = (MPI_Request) tag;
  return MPI_Wait (&request, &status);
}

/* ------------------------------------------------------------------------- */

int comm_dsum (int n, const double *u, double *v) {
  return MPI_Allreduce(u, v, n, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
}

int comm_dmax (int n, const double *u, double *v) {
  return MPI_Allreduce(u, v, n, MPI_DOUBLE, MPI_MAX, MPI_COMM_WORLD);
}

int comm_isum (int n, const int *u, int *v) {
  return MPI_Allreduce(u, v, n, MPI_INT, MPI_SUM, MPI_COMM_WORLD);
}

int comm_imax (int n, const int *u, int *v) {
  return MPI_Allreduce(u, v, n, MPI_INT, MPI_MAX, MPI_COMM_WORLD);
}

