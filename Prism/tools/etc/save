#!/bin/csh -f
#
#  usage: save [options] session
#
#  [options]:
#
#       -rea    Save a copy of the mesh in the Runs directory
#	-chk	If the field file is empty save a checkpoint file
#
#  This is a simple script to cycle through a set of simulation files.
#  It saves the current set in the sub-directory "Runs" using a sequence
#  number stored in the file ".sequence.$rea".  Then, it increments the
#  sequence file and links the previous field file to the restart file.
#
#  Files		Description		Compressed
#  ------------------------------------------------------
#  $rea.rea		Session file		
#  $rea.fld		Field file                   x
#  $rea.chk		Checkpoint file              x
#  $rea.*stat		Statistics files
#  $rea.avg             Statistics (averages)
#  $rea.{Class}         Trace files (text)           x
#  ------------------------------------------------------
#
#  $Id$

set prog = save

if ($#argv < 1) then
	echo "usage: save [options] session"
	exit 0
endif

# Set default file lists

set FilesToCp	= ( avg ev )
set FilesToComp = ( his mea sta cp log mdl flx spec )
set FilesToTar  = ( Vstat Qstat Rstat )

# Process command line arguments

while ($#argv > 0)
	switch ($argv[1])
		case -rea:
			set FilesToComp = ($FilesToComp rea )
			breaksw
		case -chk:
			set chk
			breaksw
		case -h:
			goto usage
			breaksw
		case -*:
			echo "save: unknown option:" $argv[1]
			breaksw
		default:
			set rea = $argv[1]
			breaksw
	endsw
	shift argv
end

if (-e .sequence.$rea) then	
	set seq = `cat .sequence.$rea`
else
	set seq = 1
        if (! -e Runs) mkdir Runs
endif

# Save the current results

echo "Saving current results as sequence" $seq

if (-z $rea.fld) then
   if ($?chk) then
	echo "Empty field file -- using the checkpoint file"
	cp $rea.chk Runs/$rea.fld.$seq
   else
        echo "save: ERROR: empty field file"
	exit  1
   endif
else 
	cp $rea.fld Runs/$rea.fld.$seq
endif

# Copy list

foreach f ( ${FilesToCp} )
	if (-e $rea.$f && ! -z $rea.$f) then
		echo $rea.$f ": copied to Runs/$rea.$f.$seq"
		cp $rea.$f Runs/$rea.$f.$seq
	endif
end

# Compression list 

foreach f ( ${FilesToComp} )
	if (-e $rea.$f && ! -z $rea.$f) then
		echo $rea.$f ": \c"
		cat $rea.$f | compress -v > Runs/$rea.$f.$seq.Z
	endif
end

# Tar list

set tlist
foreach f ( ${FilesToTar} )
	if (-e $rea.$f && ! -z $rea.$f) \
		set tlist = ($tlist $rea.$f)
end
if ($#tlist > 1) then
	echo "Creating a tar file of" $tlist
	tar cvf Runs/$rea.stats.$seq $tlist
endif

# Reset the restart file

echo "Updating the restart file"
/bin/rm -f $rea.rst
cp Runs/$rea.fld.$seq $rea.rst

# Increment the sequence file

echo "Updating the sequence file"
@ seq += 1
/bin/rm -f .sequence.$rea
echo $seq > .sequence.$rea

echo "Done"
exit  0

usage:
cat <<EOF
usage: $prog [options] session
options:
-rea     Save a copy of the .rea (mesh) file
-chk     Save checkpoint files
-h       Print this help message

This program attaches an sequence number to each output file from a
simulation and stores the files in the sub-directory "./Runs".  The
file session.fld from the current run is copied to session.rst to
provide an initial condition for the next simulation. A running index
is stored in the file "./.sequence.session" of the current directory.
EOF
