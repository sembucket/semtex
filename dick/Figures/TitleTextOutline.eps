%!PS-Adobe-3.1 EPSF-3.0%%Title: roughtxt3.eps%%Creator: Adobe Illustrator(R) X%%AI8_CreatorVersion: 10.0%AI9_PrintingDataBegin%%For: hmb%%CreationDate: 26/2/04%%BoundingBox: 0 0 238 108%%HiResBoundingBox: 0 0 238 107.8121%%CropBox: 0 0 238 107.8121%%LanguageLevel: 2%%DocumentData: Clean7Bit%ADOBeginClientInjection: DocumentHeader "AI10"%ADOEndClientInjection: DocumentHeader "AI10"%%Pages: 1%%DocumentNeededResources: %%DocumentSuppliedResources: procset Adobe_AGM_Image (1.0 0)%%+ procset Adobe_CoolType_Utility_MAKEOCF (1.13 0)%%+ procset Adobe_CoolType_Core (2.12 0)%%+ procset Adobe_AGM_Core (2.0 0)%%+ procset Adobe_AGM_Utils (1.0 0)%%DocumentFonts: %%DocumentNeededFonts: %%DocumentNeededFeatures: %%DocumentSuppliedFeatures: %%DocumentProcessColors:  Black%%DocumentCustomColors: %%CMYKCustomColor: %%RGBCustomColor: %%EndComments%%BeginDefaults%%ViewingOrientation: 1 0 0 1%%EndDefaults%%BeginProlog%ADOBeginClientInjection: DocumentProlog Start "AI10"%ADOEndClientInjection: DocumentProlog Start "AI10"%%BeginResource: procset Adobe_AGM_Utils 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Utils 60 dict dup begin put/bdf{	bind def} bind def/nd{	null def}bdf/xdf{	exch def}bdf/ldf {	load def}bdf/ddf{	put}bdf	/xddf{	3 -1 roll put}bdf	/xpt{	exch put}bdf/ndf{ 		exch dup where{		pop pop pop	}{		xdf	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/bdict{	mark}bdf/edict{	counttomark 2 idiv dup dict begin {def} repeat pop currentdict end}def	/ps_level	/languagelevel where{		pop systemdict /languagelevel get exec	}{		1	}ifelsedef/level2 	ps_level 2 gedef/level3 	ps_level 3 gedef/ps_version	{version cvr} stopped {		-1	}ifdef/makereadonlyarray{	/packedarray where{		pop packedarray	}{		array astore readonly	}ifelse}bdf/map_reserved_ink_name{	dup type /stringtype eq{		dup /Red eq{			pop (_Red_)		}{			dup /Green eq{				pop (_Green_)			}{				dup /Blue eq{					pop (_Blue_)				}{					dup /Cyan eq{						pop (_Cyan_)					}{						dup /Magenta eq{							pop (_Magenta_)						}{							dup /Yellow eq{								pop (_Yellow_)							}{								dup /Black eq{									pop (_Black_)								}{									dup () cvn eq{										pop (Process)									}if								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse		}ifelse	}if}bdf/AGMUTIL_GSTATE 22 dict def/get_gstate{	AGMUTIL_GSTATE begin	/AGMUTIL_GSTATE_clr_spc currentcolorspace def	/AGMUTIL_GSTATE_clr_indx 0 def	/AGMUTIL_GSTATE_clr_comps 12 array def	mark currentcolor counttomark		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def} repeat pop	/AGMUTIL_GSTATE_fnt rootfont def	/AGMUTIL_GSTATE_lw currentlinewidth def	/AGMUTIL_GSTATE_lc currentlinecap def	/AGMUTIL_GSTATE_lj currentlinejoin def	/AGMUTIL_GSTATE_ml currentmiterlimit def	currentdash /AGMUTIL_GSTATE_do xdf /AGMUTIL_GSTATE_da xdf	/AGMUTIL_GSTATE_sa currentstrokeadjust def		/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def	/AGMUTIL_GSTATE_op currentoverprint def	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def	currentcolortransfer cvlit /AGMUTIL_GSTATE_gy_xfer xdf cvlit /AGMUTIL_GSTATE_b_xfer xdf		cvlit /AGMUTIL_GSTATE_g_xfer xdf cvlit /AGMUTIL_GSTATE_r_xfer xdf	/AGMUTIL_GSTATE_ht currenthalftone def	/AGMUTIL_GSTATE_flt currentflat def	end}def/set_gstate{	AGMUTIL_GSTATE begin	AGMUTIL_GSTATE_clr_spc setcolorspace	AGMUTIL_GSTATE_clr_indx {AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def} repeat setcolor	AGMUTIL_GSTATE_fnt setfont	AGMUTIL_GSTATE_lw setlinewidth	AGMUTIL_GSTATE_lc setlinecap	AGMUTIL_GSTATE_lj setlinejoin	AGMUTIL_GSTATE_ml setmiterlimit	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash	AGMUTIL_GSTATE_sa setstrokeadjust		AGMUTIL_GSTATE_clr_rnd setcolorrendering	AGMUTIL_GSTATE_op setoverprint	AGMUTIL_GSTATE_bg cvx setblackgeneration	AGMUTIL_GSTATE_ucr cvx setundercolorremoval	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer		AGMUTIL_GSTATE_ht /HalftoneType get dup 9 eq exch 100 eq or		{		currenthalftone /HalftoneType get AGMUTIL_GSTATE_ht /HalftoneType get ne			{			  mark AGMUTIL_GSTATE_ht {sethalftone} stopped cleartomark			} if		}{		AGMUTIL_GSTATE_ht sethalftone		} ifelse		AGMUTIL_GSTATE_flt setflat	end}def/AGMUTIL_str256 256 string def/AGMUTIL_src256 256 string def/AGMUTIL_dst64 64 string def/AGMUTIL_srcLen nd/AGMUTIL_ndx nd/rdline{	currentfile AGMUTIL_str256 readline pop} bdf/rdcmntline{	currentfile AGMUTIL_str256 readline pop	(%) anchorsearch {pop} if} bdf/filter_cmyk{		dup type /filetype ne{		0 () /SubFileDecode filter	}if	[	exch	{		AGMUTIL_src256 readstring pop		dup length /AGMUTIL_srcLen exch def		/AGMUTIL_ndx 0 def				AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{			1 index exch get			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put			/AGMUTIL_ndx AGMUTIL_ndx 1 add def		}for		pop		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval	}	bind	/exec cvx	] cvx} bdf/AGMUTIL_imagefile nd/AGMUTIL_imbuf nd/read_image_file{	AGMUTIL_imagefile 0 setfileposition	dup /DataSource {AGMUTIL_imagefile AGMUTIL_imbuf readstring pop} put	exch	load exec}def/write_image_file{	begin	{ (AGMUTIL_imagefile) (w+) file } stopped{		false	}{		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 		Adobe_AGM_Utils/AGMUTIL_imbuf Width BitsPerComponent mul 7 add 8 idiv string ddf		1 1 Height { 			pop			DataSource dup type /filetype eq{				AGMUTIL_imbuf readstring pop			}{				exec			} ifelse			AGMUTIL_imagefile exch writestring		}for		true	}ifelse	end}def/close_image_file{	AGMUTIL_imagefile closefile (AGMUTIL_imagefile) deletefile}def/consumeimagedata{	begin	currentdict /MultipleDataSources known not		{/MultipleDataSources false def} if	MultipleDataSources		{		1 dict begin		/flushbuffer Width cvi string def		1 1 Height cvi			{			pop			0 1 DataSource length 1 sub				{				DataSource exch get				dup type dup 				/filetype eq					{					exch flushbuffer readstring pop pop					}if				/arraytype eq					{					exec pop					}if				}for			}for		end		}		{		/DataSource load type dup 		/filetype eq			{			1 dict begin			/flushbuffer Width Decode length 2 div mul cvi string def			1 1 Height { pop DataSource flushbuffer readstring pop pop} for			end			}if		/arraytype eq			{			1 1 Height { pop DataSource pop } for			}if		}ifelse	end}bdf/addprocs{     2{/exec load}repeat     3 1 roll     [ 5 1 roll ] bind cvx}def/modify_halftone_xfer{	currenthalftone dup length dict copy begin    currentdict 2 index known{    	1 index load dup length dict copy begin		currentdict/TransferFunction known{			/TransferFunction load		}{			currenttransfer		}ifelse	    addprocs /TransferFunction xdf 	    currentdict end def		currentdict end sethalftone	}{ 		currentdict/TransferFunction known{			/TransferFunction load 		}{			currenttransfer		}ifelse		addprocs /TransferFunction xdf		currentdict end sethalftone				pop	}ifelse}def/doc_setup{	Adobe_AGM_Utils begin}bdf/doc_trailer{	currentdict Adobe_AGM_Utils eq{		end	}if}bdfsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_AGM_Core 2.0 0%%Version: 2.0 0%%Copyright: Copyright (C) 1997-1999 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Core 205 dict dup begin put/nd{	null def}bind def/Adobe_AGM_Core_Id /Adobe_AGM_Core_2.0_0 def/AGMCORE_str256 256 string def/AGMCORE_src256 256 string def/AGMCORE_save nd/AGMCORE_graphicsave nd/AGMCORE_c 0 def/AGMCORE_m 0 def/AGMCORE_y 0 def/AGMCORE_k 0 def/AGMCORE_cmykbuf 4 array def/AGMCORE_screen [currentscreen] cvx def/AGMCORE_tmp 0 def/AGMCORE_&setgray nd/AGMCORE_&setcolor nd/AGMCORE_&setcolorspace nd/AGMCORE_&setcmykcolor nd/AGMCORE_cyan_plate nd/AGMCORE_magenta_plate nd/AGMCORE_yellow_plate nd/AGMCORE_black_plate nd/AGMCORE_plate_ndx nd/AGMCORE_get_ink_data nd/AGMCORE_is_cmyk_sep nd/AGMCORE_host_sep nd/AGMCORE_will_host_sep nd/AGMCORE_avoid_L2_sep_space nd/AGMCORE_distilling nd/AGMCORE_composite_job nd/AGMCORE_producing_seps nd/AGMCORE_ps_level -1 def/AGMCORE_ps_version -1 def/AGMCORE_environ_ok nd/AGMCORE_CSA_cache 0 dict def/AGMCORE_CSD_cache 0 dict def/AGMCORE_pattern_cache 0 dict def/AGMCORE_currentoverprint false def/AGMCORE_deltaX nd/AGMCORE_deltaY nd/AGMCORE_name nd/AGMCORE_sep_special nd/AGMCORE_err_strings 4 dict def/AGMCORE_cur_err nd/AGMCORE_ovp nd/AGMCORE_current_spot_alias false def/AGMCORE_inverting false def/AGMCORE_feature_dictCount nd/AGMCORE_feature_opCount nd/AGMCORE_feature_ctm nd/AGMCORE_ConvertToProcess false def/AGMCORE_Default_CTM matrix def/knockout_unitsq nd/AGMCORE_CRD_cache where{	pop}{	/AGMCORE_CRD_cache 0 dict def}ifelse/AGMCORE_key_known{	where{		/Adobe_AGM_Core_Id known	}{		false	}ifelse}ndf/flushinput{	save	/CompareBuffer 3 -1 roll def	/readbuffer 256 string def	mark	{	currentfile readbuffer {readline} stopped		{cleartomark mark}		{		not			{pop exit}		if		CompareBuffer eq			{exit}		if		}ifelse	}loop	cleartomark	restore}bdf/getspotfunction{	AGMCORE_screen exch pop exch pop	dup type /dicttype eq{		dup /HalftoneType get 1 eq{			/SpotFunction get		}{			dup /HalftoneType get 2 eq{				/GraySpotFunction get			}{ 				pop				{					abs exch abs 2 copy add 1 gt{						1 sub dup mul exch 1 sub dup mul add 1 sub					}{						dup mul exch dup mul add 1 exch sub					}ifelse				}bind			}ifelse		}ifelse	}if} def/clp_npth{	clip newpath} def/eoclp_npth{	eoclip newpath} def/stkpath_clp_npth{	strokepath clip newpath} def/stk_n_clp_npth{	gsave stroke grestore clip newpath} def/npth_clp{	newpath clip} def/graphic_setup{	/AGMCORE_graphicsave save def	concat	0 setgray	0 setlinecap	0 setlinejoin	1 setlinewidth	[] 0 setdash	10 setmiterlimit	newpath	false setoverprint	false setstrokeadjust	Adobe_AGM_Core/spot_alias get exec	/Adobe_AGM_Image where {		pop		Adobe_AGM_Image/spot_alias 2 copy known{			get exec		}{			pop pop		}ifelse	} if	100 dict begin	/showpage {} def	mark} def/graphic_cleanup{	cleartomark	end	AGMCORE_graphicsave restore} def/compose_error_msg{	grestoreall initgraphics		/Helvetica findfont 10 scalefont setfont		/AGMCORE_deltaY 100 def	/AGMCORE_deltaX 310 def				clippath pathbbox newpath pop pop 36 add exch 36 add exch moveto	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath	0 AGMCORE_&setgray	gsave 1 AGMCORE_&setgray fill grestore 	1 setlinewidth gsave stroke grestore			currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto		/AGMCORE_deltaY 12 def	/AGMCORE_tmp 0 def	AGMCORE_err_strings exch get		{		dup 32 eq			{			pop			AGMCORE_str256 0 AGMCORE_tmp getinterval			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt				{				currentpoint AGMCORE_deltaY sub exch pop				clippath pathbbox pop pop pop 44 add exch moveto				} if			AGMCORE_str256 0 AGMCORE_tmp getinterval show ( ) show						0 1 AGMCORE_str256 length 1 sub				{				AGMCORE_str256 exch 0 put				}for			/AGMCORE_tmp 0 def			}			{				AGMCORE_str256 exch AGMCORE_tmp exch put				/AGMCORE_tmp AGMCORE_tmp 1 add def			} ifelse		} forall} bdf/doc_setup{	Adobe_AGM_Core begin		/AGMCORE_will_host_separate xdf	/AGMCORE_ps_version xdf	/AGMCORE_ps_level xdf		errordict /AGM_handleerror known not{		errordict /AGM_handleerror errordict /handleerror get put		errordict /handleerror {			Adobe_AGM_Core begin			$error /newerror get AGMCORE_cur_err null ne and{				$error /newerror false put				AGMCORE_cur_err compose_error_msg			}if			$error /newerror true put			end			errordict /AGM_handleerror get exec			} bind put		}if			/AGMCORE_environ_ok 		ps_level AGMCORE_ps_level ge		ps_version AGMCORE_ps_version ge and 		AGMCORE_ps_level -1 eq or	def		AGMCORE_environ_ok not		{/AGMCORE_cur_err /AGMCORE_bad_environ def} if		/AGMCORE_&setgray systemdict/setgray get def	level2{		/AGMCORE_&setcolor systemdict/setcolor get def		/AGMCORE_&setcolorspace systemdict/setcolorspace get def	}if	/AGMCORE_distilling		/product where{			pop systemdict/setdistillerparams known product (Adobe PostScript Parser) ne and		}{			false		}ifelse	def	/AGMCORE_in_rip_sep		/AGMCORE_in_rip_sep where{			pop AGMCORE_in_rip_sep		}{			AGMCORE_distilling 			{				false			}{				userdict/Adobe_AGM_OnHost_Seps known{					false				}{					level2{						currentpagedevice/Separations 2 copy known{							get						}{							pop pop false						}ifelse					}{						false					}ifelse				}ifelse			}ifelse		}ifelse	def	level2 not{		/xput{			dup load dup length exch maxlength eq{				dup dup load dup				length dup 0 eq {pop 1} if 2 mul dict copy def			}if			load begin				def 			end		}def	}{		/xput{			load 3 1 roll put		}def	}ifelse	/AGMCORE_GSTATE AGMCORE_key_known not{		/AGMCORE_GSTATE 21 dict def		/AGMCORE_gstack 32 array def		/AGMCORE_gstackptr 0 def		/AGMCORE_gstacksaveptr 0 def		/AGMCORE_gstackframekeys 8 def													/AGMCORE_&gsave /gsave ldf		/AGMCORE_&grestore /grestore ldf		/AGMCORE_&grestoreall /grestoreall ldf		/AGMCORE_&save /save ldf		/AGMCORE_gdictcopy {			begin			{ def } forall			end		}def		/AGMCORE_gput {			AGMCORE_gstack AGMCORE_gstackptr get			3 1 roll			put		}def		/AGMCORE_gget {			AGMCORE_gstack AGMCORE_gstackptr get			exch			get		}def		/gsave {			AGMCORE_&gsave			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		/grestore {			AGMCORE_&grestore			AGMCORE_gstackptr 1 sub			dup AGMCORE_gstacksaveptr lt {1 add} if			Adobe_AGM_Core exch			/AGMCORE_gstackptr exch put		}def		/grestoreall {			AGMCORE_&grestoreall			Adobe_AGM_Core			/AGMCORE_gstackptr AGMCORE_gstacksaveptr put 		}def		/save {			AGMCORE_&save			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gstackptr 1 add			dup 32 ge {limitcheck} if			Adobe_AGM_Core begin				/AGMCORE_gstackptr exch def				/AGMCORE_gstacksaveptr AGMCORE_gstackptr def			end			AGMCORE_gstack AGMCORE_gstackptr get			AGMCORE_gdictcopy		}def		0 1 AGMCORE_gstack length 1 sub {				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put		} for	}if	/currentcmykcolor [0 0 0 0] AGMCORE_gput	/currentstrokeadjust false AGMCORE_gput	/currentcolorspace [/DeviceGray] AGMCORE_gput	/sep_tint 0 AGMCORE_gput	/sep_colorspace_dict null AGMCORE_gput	/indexed_colorspace_dict null AGMCORE_gput	/currentcolor_intent () AGMCORE_gput	/customcolor_tint 1 AGMCORE_gput	end}def/page_setup{	/setcmykcolor where{		pop		Adobe_AGM_Core/AGMCORE_&setcmykcolor /setcmykcolor load put	}if	Adobe_AGM_Core begin	/setcmykcolor	{		4 copy AGMCORE_cmykbuf astore /currentcmykcolor exch AGMCORE_gput		1 sub 4 1 roll		3 {			3 index add neg dup 0 lt {				pop 0			} if			3 1 roll		} repeat		setrgbcolor pop	}ndf	/currentcmykcolor	{		/currentcmykcolor AGMCORE_gget aload pop	}ndf	/setoverprint	{		pop	}ndf	/currentoverprint	{		false	}ndf	/AGMCORE_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def	/AGMCORE_plate_ndx 		AGMCORE_cyan_plate{ 			0		}{			AGMCORE_magenta_plate{				1			}{				AGMCORE_yellow_plate{					2				}{					AGMCORE_black_plate{						3					}{						4					}ifelse				}ifelse			}ifelse		}ifelse		def	/AGMCORE_composite_job		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def		/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def		/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def		/AGM_preserve_spots 		/AGM_preserve_spots where{			pop AGM_preserve_spots		}{			AGMCORE_distilling AGMCORE_producing_seps or		}ifelse	def	/AGM_is_distiller_preserving_spotimages	{		currentdistillerparams/PreserveOverprintSettings known		{			currentdistillerparams/PreserveOverprintSettings get				{					currentdistillerparams/ColorConversionStrategy known					{						currentdistillerparams/ColorConversionStrategy get						/LeaveColorUnchanged eq					}{						true					}ifelse				}{					false				}ifelse		}{			false		}ifelse	}def	/convert_spot_to_process where {pop}{		/convert_spot_to_process		{			dup dup (None) eq exch (All) eq or				{				pop false				}{				AGMCORE_host_sep				{ 					gsave					1 0 0 0 setcmykcolor currentgray 1 exch sub					0 1 0 0 setcmykcolor currentgray 1 exch sub					0 0 1 0 setcmykcolor currentgray 1 exch sub					0 0 0 1 setcmykcolor currentgray 1 exch sub					add add add 0 eq					{						pop false					}{						false setoverprint						1 1 1 1 5 -1 roll findcmykcustomcolor 1 setcustomcolor						currentgray 0 eq					}ifelse					grestore				}{					AGMCORE_distilling					{						pop AGM_is_distiller_preserving_spotimages not					}{						Adobe_AGM_Core/AGMCORE_name xddf						false						currentpagedevice/OverrideSeparations known							{							currentpagedevice/OverrideSeparations get								{								/HqnSpots /ProcSet resourcestatus									{									pop pop pop true									}if								}if							}if												{							AGMCORE_name /HqnSpots /ProcSet findresource /TestSpot get exec not							}{							gsave							[/Separation AGMCORE_name /DeviceGray {}]setcolorspace							false							currentpagedevice/SeparationColorNames 2 copy known							{								get								{ AGMCORE_name eq or}forall							not							}{								pop pop pop true							}ifelse							grestore						}ifelse					}ifelse				}ifelse			}ifelse		}def	}ifelse	/convert_to_process where {pop}{		/convert_to_process		{			dup length 0 eq				{				pop false				}{				AGMCORE_host_sep				{ 				true exch					{					convert_spot_to_process and					}				forall				}{				false exch					{					convert_spot_to_process or					}				forall				}ifelse			}ifelse		}def	}ifelse		AGMCORE_host_sep AGMCORE_will_host_separate not and {		/AGMCORE_cur_err /AGMCORE_color_space_onhost_seps def		AGMCORE_color_space_onhost_seps	}if	/AGMCORE_avoid_L2_sep_space  		version cvr 2012 lt 		level2 and 		AGMCORE_producing_seps not and	def	/AGMCORE_is_cmyk_sep		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or	def	/AGM_avoid_0_cmyk where{		pop AGM_avoid_0_cmyk	}{		AGM_preserve_spots 		userdict/Adobe_AGM_OnHost_Seps known 		userdict/Adobe_AGM_InRip_Seps known or		not and	}ifelse	{		/setcmykcolor[			{				4 copy add add add 0 eq currentoverprint and{					pop 0.0005				}if			}/exec cvx			/AGMCORE_&setcmykcolor load dup type/operatortype ne{				/exec cvx			}if		]cvx def	}if	AGMCORE_host_sep{		/AGMCORE_get_ink_data			AGMCORE_cyan_plate{				{pop pop pop}			}{			  	AGMCORE_magenta_plate{			  		{4 3 roll pop pop pop}			  	}{			  		AGMCORE_yellow_plate{			  			{4 2 roll pop pop pop}			  		}{			  			{4 1 roll pop pop pop}			  		}ifelse			  	}ifelse			}ifelse		def		/clip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&clip /clip load put			/clip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&clip			}def		}if		/eoclip AGMCORE_key_known not{			Adobe_AGM_Core/AGMCORE_&eoclip /eoclip load put			/eoclip			{				current_spot_alias{					currentdict/InksUsed known{						[						InksUsed{							dup map_alias{								/Name get exch pop							}if						}forall						]						/InksUsed xdf					}if				}if				AGMCORE_&eoclip			}def		}if	}if	AGMCORE_in_rip_sep{		/setcustomcolor		{			exch aload pop			dup 7 1 roll inRip_spot_has_ink not	{ 				4 {4 index mul 4 1 roll}				repeat				/DeviceCMYK setcolorspace				6 -2 roll pop pop			}{ 				Adobe_AGM_Core begin					/AGMCORE_k xdf /AGMCORE_y xdf /AGMCORE_m xdf /AGMCORE_c xdf				end				[/Separation 4 -1 roll /DeviceCMYK				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}				]				setcolorspace			}ifelse			setcolor		}ndf		/setseparationgray		{			[/Separation (All) /DeviceGray {}] setcolorspace_opt			1 exch sub setcolor		}ndf	}{		/setseparationgray		{			AGMCORE_&setgray		}ndf	}ifelse	/findcmykcustomcolor	{		5 makereadonlyarray	}ndf	/setcustomcolor	{		exch aload pop pop		4 {4 index mul 4 1 roll} repeat		setcmykcolor pop	}ndf		/has_color		/colorimage where{			AGMCORE_producing_seps{				pop true			}{				systemdict eq			}ifelse		}{			false		}ifelse	def		/map_index	{		1 index mul exch getinterval {255 div} forall	}def		level2{		/mo /moveto ldf		/li /lineto ldf		/cv /curveto ldf		/knockout_unitsq		{			1 setgray			0 0 1 1 rectfill		}def		/level2ScreenFreq{			begin			60			HalftoneType 1 eq{				pop Frequency			}if			HalftoneType 2 eq{				pop GrayFrequency			}if			HalftoneType 5 eq{				pop Default level2ScreenFreq			}if			 end		}def		/currentScreenFreq{			currenthalftone level2ScreenFreq		}def		level2 /setcolorspace AGMCORE_key_known not and{					/AGMCORE_&&&setcolorspace /setcolorspace ldf			/AGMCORE_ReplaceMappedColor			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get dup /Separation eq					{						pop						dup length array copy						dup dup 1 get						current_spot_alias						{							dup map_alias							{								begin								/sep_colorspace_dict currentdict AGMCORE_gput								pop pop	pop																	[ 									/Separation Name 									CSA map_csa									dup /MappedCSA xdf 									/sep_colorspace_proc load								]								dup Name								end							}if						}if						map_reserved_ink_name 1 exch put					}{						/DeviceN eq 						{							dup length array copy							dup dup 1 get [ 								exch {									current_spot_alias{										dup map_alias{											/Name get exch pop										}if									}if									map_reserved_ink_name								} forall 							] 1 exch put						}if					}ifelse				}if			}def			/setcolorspace			{				dup type dup /arraytype eq exch /packedarraytype eq or				{					dup 0 get /Indexed eq					{						AGMCORE_distilling						{							/PhotoshopDuotoneList where							{								pop false							}{								true							}ifelse						}{							true						}ifelse						{							aload pop 3 -1 roll							AGMCORE_ReplaceMappedColor							3 1 roll 4 array astore						}if					}{						AGMCORE_ReplaceMappedColor					}ifelse				}if				AGMCORE_&&&setcolorspace			}def		}if		}{				/adj		{			currentstrokeadjust{				transform				0.25 sub round 0.25 add exch				0.25 sub round 0.25 add exch				itransform			}if		}def		/mo{			adj moveto		}def		/li{			adj lineto		}def		/cv{			6 2 roll adj			6 2 roll adj			6 2 roll adj curveto		}def		/knockout_unitsq		{			1 setgray			8 8 1 [8 0 0 8 0 0] {<ffffffffffffffff>} image		}def		/currentstrokeadjust{			/currentstrokeadjust AGMCORE_gget		}def		/setstrokeadjust{			/currentstrokeadjust exch AGMCORE_gput		}def		/currentScreenFreq{			currentscreen pop pop		}def		/setcolorspace		{			/currentcolorspace exch AGMCORE_gput		} def				/currentcolorspace		{			/currentcolorspace AGMCORE_gget		} def				/n_color_components		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop 1			}{				/DeviceCMYK eq{					4				}{					3				}ifelse			}ifelse		} def				/setcolor_devicecolor		{			dup type /arraytype eq{				0 get			}if			dup /DeviceGray eq{				pop setgray			}{				/DeviceCMYK eq{					setcmykcolor				}{					setrgbcolor				}ifelse			}ifelse		}def			/setcolor		{			currentcolorspace 0 get			dup /DeviceGray ne{				dup /DeviceCMYK ne{					dup /DeviceRGB ne{						dup /Separation eq{							pop							currentcolorspace 3 get exec							currentcolorspace 2 get						}{							dup /Indexed eq{								pop								currentcolorspace 3 get dup type /stringtype eq{									currentcolorspace 1 get n_color_components									3 -1 roll map_index								}{									exec								}ifelse								currentcolorspace 1 get							}{								/AGMCORE_cur_err /AGMCORE_invalid_color_space def								AGMCORE_invalid_color_space							}ifelse						}ifelse					}if				}if			}if			setcolor_devicecolor		} def	}ifelse		/sop /setoverprint ldf	/lw /setlinewidth ldf	/lc /setlinecap ldf	/lj /setlinejoin ldf	/ml /setmiterlimit ldf	/dsh /setdash ldf	/sadj /setstrokeadjust ldf	/gry /setgray ldf	/rgb /setrgbcolor ldf	/cmyk /setcmykcolor ldf	/sep /setsepcolor ldf	/idx /setindexedcolor ldf	/colr /setcolor ldf	/csacrd /set_csa_crd ldf	/sepcs /setsepcolorspace ldf	/idxcs /setindexedcolorspace ldf	/cp /closepath ldf	/clp /clp_npth ldf	/eclp /eoclp_npth ldf	/spclp /stkpath_clp_npth ldf	/f /fill ldf	/ef /eofill ldf	/s /stroke ldf	/sclp /stk_n_clp_npth ldf	/nclp /npth_clp ldf	/gset /graphic_setup ldf	/gcln /graphic_cleanup ldf		currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and {			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}defsystemdict /findcolorrendering known{	/findcolorrendering systemdict /findcolorrendering get def}ifsystemdict /setcolorrendering known{	/setcolorrendering systemdict /setcolorrendering get def}if/test_cmyk_color_plate{	gsave	setcmykcolor currentgray 1 ne	grestore}def/inRip_spot_has_ink{	dup Adobe_AGM_Core/AGMCORE_name xddf	convert_spot_to_process not}def/current_ink{	dup length 0 eq{		pop true	}{		Adobe_AGM_Core/ink_result false put		{			dup /ProcessCyan eq{				AGMCORE_cyan_plate ink_result or Adobe_AGM_Core/ink_result xddf			}{				dup /ProcessMagenta eq{					AGMCORE_magenta_plate ink_result or Adobe_AGM_Core/ink_result xddf				}{					dup /ProcessYellow eq{						AGMCORE_yellow_plate ink_result or Adobe_AGM_Core/ink_result xddf					}{						dup /ProcessBlack eq{							AGMCORE_black_plate ink_result or Adobe_AGM_Core/ink_result xddf						}{							dup /sep_colorspace_dict AGMCORE_gget dup null eq{								pop false ink_result or Adobe_AGM_Core/ink_result xddf							}{								/Name get eq{									1 setsepcolor									currentgray 1 ne ink_result or Adobe_AGM_Core/ink_result xddf								}{									false ink_result or Adobe_AGM_Core/ink_result xddf								}ifelse							}ifelse						}ifelse					}ifelse				}ifelse			}ifelse			pop 		} forall		ink_result	}ifelse}def/map255_to_range{	1 index sub	3 -1 roll 255 div mul add}def/set_csa_crd{	/sep_colorspace_dict null AGMCORE_gput	begin		CSA map_csa setcolorspace_opt		set_crd	end}def/setsepcolor{ 		/sep_colorspace_dict AGMCORE_gget begin		dup /sep_tint exch AGMCORE_gput		TintProc	end} def/sep_colorspace_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	currentdict/Components known{		Components aload pop 		TintMethod/Lab eq{			2 {AGMCORE_tmp mul NComponents 1 roll} repeat			LMax sub AGMCORE_tmp mul LMax add  NComponents 1 roll		}{			TintMethod/Subtractive eq{				NComponents{					AGMCORE_tmp mul NComponents 1 roll				}repeat			}{				NComponents{					1 sub AGMCORE_tmp mul 1 add  NComponents 1 roll				} repeat			}ifelse		}ifelse	}{		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get		aload pop	}ifelse	end} def/sep_colorspace_gray_proc{	Adobe_AGM_Core/AGMCORE_tmp xddf	/sep_colorspace_dict AGMCORE_gget begin	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get	end} def/sep_proc_name{	dup 0 get 	dup /DeviceRGB eq exch /DeviceCMYK eq or level2 not and has_color not and{		pop [/DeviceGray]		/sep_colorspace_gray_proc	}{		/sep_colorspace_proc	}ifelse} def/setsepcolorspace{ 		current_spot_alias{		dup begin			Name map_alias{				exch pop			}if		end	}if	dup /sep_colorspace_dict exch AGMCORE_gput	begin	/MappedCSA CSA map_csa def	Adobe_AGM_Core/AGMCORE_sep_special Name dup () eq exch (All) eq or ddf		AGMCORE_avoid_L2_sep_space{		[/Indexed MappedCSA sep_proc_name 255 exch 			{ 255 div } /exec cvx 3 -1 roll [ 4 1 roll load /exec cvx ] cvx 		] setcolorspace_opt		/TintProc {			255 mul round cvi setcolor		}bdf	}{		MappedCSA 0 get /DeviceCMYK eq 		currentdict/Components known and 		AGMCORE_sep_special not and{			/TintProc [				Components aload pop Name findcmykcustomcolor 				/exch cvx /setcustomcolor cvx			] cvx bdf		}{ 			AGMCORE_host_sep Name (All) eq and{ 				/TintProc { 					1 exch sub setseparationgray 				}bdf 			}{				AGMCORE_in_rip_sep MappedCSA 0 get /DeviceCMYK eq and 				AGMCORE_host_sep or				Name () eq and{					/TintProc [						MappedCSA sep_proc_name exch 0 get /DeviceCMYK eq{							cvx /setcmykcolor cvx						}{							cvx /setgray cvx						}ifelse					] cvx bdf				}{					AGMCORE_producing_seps MappedCSA 0 get dup /DeviceCMYK eq exch /DeviceGray eq or and AGMCORE_sep_special not and{	 					/TintProc [							/dup cvx							MappedCSA sep_proc_name cvx exch							0 get /DeviceGray eq{								1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx							}if							/Name cvx /findcmykcustomcolor cvx /exch cvx														AGMCORE_host_sep{								AGMCORE_is_cmyk_sep							}{								Name inRip_spot_has_ink not							}ifelse							{		 						/pop cvx 1							}if							/setcustomcolor cvx						] cvx bdf 					}{ 						/TintProc /setcolor ldf												[/Separation Name MappedCSA sep_proc_name load ] setcolorspace_opt					}ifelse				}ifelse			}ifelse		}ifelse	}ifelse	set_crd	setsepcolor	end} def/setindexedcolorspace{	dup /indexed_colorspace_dict exch AGMCORE_gput	begin		/MappedCSA CSA map_csa def		AGMCORE_host_sep level2 not and{			0 0 0 0 setcmykcolor		}{			[/Indexed MappedCSA 			level2 not has_color not and{				dup 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or{					pop [/DeviceGray]				}if				HiVal GrayLookup			}{				HiVal 				currentdict/RangeArray known{					{ 						/indexed_colorspace_dict AGMCORE_gget begin						Lookup exch 						dup HiVal gt{							pop HiVal						}if						NComponents mul NComponents getinterval {} forall						NComponents 1 sub -1 0{							RangeArray exch 2 mul 2 getinterval aload pop map255_to_range							NComponents 1 roll						}for						end					} bind				}{					Lookup				}ifelse			}ifelse			] setcolorspace_opt						set_crd		}ifelse	end}def/setindexedcolor{	AGMCORE_host_sep{		/indexed_colorspace_dict AGMCORE_gget/Lookup get 4 3 -1 roll map_index setcmykcolor	}{		setcolor	}ifelse} def/ignoreimagedata{	currentoverprint not{		gsave 		dup begin		1 setgray		0 0 ImageMatrix itransform 		Width Height ImageMatrix idtransform rectfill 		end		grestore		}if	consumeimagedata}def/add_csa{	Adobe_AGM_Core begin			/AGMCORE_CSA_cache xput	end}def/map_csa{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSA_cache get exch get	}if}def/add_csd{	Adobe_AGM_Core begin		/AGMCORE_CSD_cache xput	end}def/get_csd{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_CSD_cache get exch get	}if}def/get_csd_by_name{	dup type dup /nametype eq exch /stringtype eq or{		Adobe_AGM_Core begin		/AGMCORE_CSD_Name xdf		AGMCORE_CSD_cache		{			dup /Name get AGMCORE_CSD_Name eq			{				exch pop exit			}{				pop			}ifelse			pop		}forall		end	}if}def/cachepattern_level2{	4 dict begin	/comparebuffer exch def	/holdbuffer exch def	/readbuffer 1024 string def	/LZWFilter holdbuffer /LZWEncode filter def	{		currentfile readbuffer readline not			{pop exit}		if		dup LZWFilter exch writestring		LZWFilter (\n) writestring		comparebuffer eq			{exit}		if	}loop	LZWFilter closefile	end}def/cachepattern_level3{	3 dict begin	/comparebuffer exch def	/readbuffer 1024 string def	/DoEOL false def	{ 		DoEOL			{			(\n)			/DoEOL false def			}			{			currentfile readbuffer readline not				{pop ()}				{				dup length 0 eq					{ pop(\n)}					{					dup comparebuffer eq						{pop ()}						{/DoEOL true def}					ifelse					}				ifelse				}			ifelse			}		ifelse	} /ReusableStreamDecode filter	end}def/add_pattern{	Adobe_AGM_Core begin		/AGMCORE_pattern_cache xput	end}def/get_pattern{	dup type /nametype eq{		Adobe_AGM_Core/AGMCORE_pattern_cache get exch get	}if}def/make_pattern{	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform	exch 3 index /XStep get 1 index exch 2 copy div cvi mul sub sub	exch 3 index /YStep get 1 index exch 2 copy div cvi mul sub sub	matrix translate exch matrix concatmatrix	makepattern}def/set_pattern{	dup /PatternType get 1 eq{		dup /PaintType get 1 eq{			false sop [/DeviceGray] setcolorspace 0 setgray		}if	}if	setpattern}def/setcolorspace_opt{	dup currentcolorspace eq{		pop	}{		setcolorspace	}ifelse}def/updatecolorrendering{		currentcolorrendering/Intent known{		currentcolorrendering/Intent get	}{		null	}ifelse		Intent ne{		false  		Intent		AGMCORE_CRD_cache {			exch pop 			begin				dup Intent eq{					currentdict setcolorrendering_opt					end 					exch pop true exch						exit				}if			end		} forall		pop		not{			systemdict /findcolorrendering known{				Intent findcolorrendering pop				/ColorRendering findresource 				dup length dict copy				setcolorrendering_opt			}if		}if	}if} def/add_crd{	AGMCORE_CRD_cache 3 1 roll put}def/set_crd{	AGMCORE_host_sep not level2 and{		currentdict/CRD known{			AGMCORE_CRD_cache CRD get dup null ne{				setcolorrendering_opt			}{				pop			}ifelse		}{			currentdict/Intent known{				updatecolorrendering			}if		}ifelse	}if}def/setcolorrendering_opt{	dup currentcolorrendering eq{		pop	}{		begin			/Intent Intent def			currentdict		end		setcolorrendering	}ifelse}def/cdndf{	exch dup currentdict exch known{		pop pop	}{		exch def	}ifelse}def/cpaint_gcomp{	convert_to_process Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf	Adobe_AGM_Core/AGMCORE_ConvertToProcess get not	{		(%end_cpaint_gcomp) flushinput	}if}def/cpaint_gsep{	Adobe_AGM_Core/AGMCORE_ConvertToProcess get	{			(%end_cpaint_gsep) flushinput	}if}def/cpaint_gend{	newpath}def/AGMCORE_ctm_stack bdict	/push_ctm {		stack length size le{			stack dup length 2 mul array 			dup /stack exch def			copy pop		}if		stack size 3 -1 roll put		/size size 1 add def	}	/pop_ctm {		/size size 1 sub def		size 0 lt{ 			/size 0 def		}if		stack size get	}	/stack 1 array	/size 0 edict def/save_ctm{	matrix currentmatrix AGMCORE_ctm_stack begin 		push_ctm 	end}def/restore_ctm{	AGMCORE_ctm_stack begin		pop_ctm 	end	setmatrix}def/path_rez{	dup 0 ne{		AGMCORE_deviceDPI exch div 		dup 1 lt{			pop 1		}if		setflat	}{		pop	}ifelse 	}def/rdcmntline {	currentfile AGMCORE_str256 readline pop	(%) anchorsearch {pop} if} def/set_spot_alias_ary{	/AGMCORE_SpotAliasAry where{		pop pop	}{		Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf		true set_spot_alias	}ifelse}def/set_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias 3 -1 roll put	}{		pop	}ifelse}def/current_spot_alias{	/AGMCORE_SpotAliasAry where{		/AGMCORE_current_spot_alias get	}{		false	}ifelse}def/map_alias{	/AGMCORE_SpotAliasAry where{		begin			/AGMCORE_name xdf			false				AGMCORE_SpotAliasAry{				dup/Name get AGMCORE_name eq{					save exch					/Adobe_AGM_Core currentdict def					/CSD get get_csd					exch restore					exch pop true					exit				}{					pop				}ifelse			}forall		end	}{		pop false	}ifelse}bdf/spot_alias{	true set_spot_alias		/AGMCORE_&setcustomcolor AGMCORE_key_known not {		Adobe_AGM_Core/AGMCORE_&setcustomcolor /setcustomcolor load put	} if	/customcolor_tint 1 AGMCORE_gput		Adobe_AGM_Core begin	/setcustomcolor	{				dup /customcolor_tint exch AGMCORE_gput				current_spot_alias{			1 index 4 get map_alias{				mark 3 1 roll				setsepcolorspace				counttomark 0 ne{					setsepcolor				}if				pop				pop			}{				AGMCORE_&setcustomcolor			}ifelse		}{			AGMCORE_&setcustomcolor		}ifelse	}bdf	end}def/begin_feature{	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if}def/end_feature{	2 dict begin	/spd /setpagedevice load def	/setpagedevice { get_gstate spd set_gstate } def	stopped{$error/newerror false put}if	end	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if}def/set_negative{	Adobe_AGM_Core begin	/AGMCORE_inverting exch def	level2{		currentpagedevice/NegativePrint known{			currentpagedevice/NegativePrint get Adobe_AGM_Core/AGMCORE_inverting get ne{				true begin_feature true{						bdict /NegativePrint Adobe_AGM_Core/AGMCORE_inverting get edict setpagedevice				}end_feature			}if			/AGMCORE_inverting false def		}if	}if	AGMCORE_inverting{		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer		gsave newpath clippath 1 /setseparationgray where{pop setseparationgray}{setgray}ifelse 		fill grestore	}if	end}def/lw_save_restore_override {	/md where {		pop		md begin		/pmSVsetup{} def		/endp{}def		/pse{}def		/psb{}def		/orig_showpage where			{pop}			{/orig_showpage /showpage load def}		ifelse		/showpage {orig_showpage gR} def		end	}if}def/pscript_showpage_override {	/NTPSOct95 where	{		begin		showpage		save		/showpage /restore load def		/restore {exch pop}def		end	}if}def/driver_media_override{	/md where {		pop		md /initializepage known {			md /initializepage {} put		} if		md /rC known {			md /rC {4{pop}repeat} put		} if	}if		Adobe_AGM_Core /AGMCORE_Default_CTM matrix currentmatrix put}def/driver_check_media_override{	Adobe_AGM_Core /AGMCORE_Default_CTM get matrix currentmatrix ne	{		Adobe_AGM_Core /AGMCORE_Default_CTM get setmatrix	}if}defAGMCORE_err_strings begin	/AGMCORE_bad_environ (Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. ) def	/AGMCORE_color_space_onhost_seps (This job contains colors that will not separate with on-host methods. ) def	/AGMCORE_invalid_color_space (This job contains an invalid color space. ) defendendsystemdict /setpacking known{	setpacking} if%%EndResource%%BeginResource: procset Adobe_CoolType_Core 2.12 0%%Copyright: Copyright 1997-2001 Adobe Systems Incorporated.  All Rights Reserved.%%Version: 2.12 0userdict/Adobe_CoolType_Core 60 dict dup begin put/Level2? systemdict/languagelevel known dup{pop systemdict/languagelevel get 2 ge}if def Level2?not{/currentglobal false def/setglobal/pop load def/gcheck{pop false}bind def/currentpacking false def/setpacking/pop load def/SharedFontDirectory 0 dictdef}if currentpacking true setpacking/@_SaveStackLevels{Adobe_CoolType_Databegin @opStackCountByLevel @opStackLevel 2 copy known not{2 copy 3 dict dup/args 7 index 5 add array put put get}{get dup/args get dup length 3 index lt{dup length 5 add array exch 1 index exch 0 exch putinterval 1 index exch/argsexch put}{pop}ifelse}ifelse begin count 2 sub 1 index lt{pop count 1 sub}ifdup/argCount exch def dup 0 gt{exch 1 index 2 add 1 roll args exch 0 exchgetinterval astore pop}{pop}ifelse count 1 sub/restCount exch def end/@opStackLevel @opStackLevel 1 add def countdictstack 1 sub@dictStackCountByLevel exch @dictStackLevel exch put/@dictStackLevel@dictStackLevel 1 add def end}bind def/@_RestoreStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 sub def@opStackCountByLevel @opStackLevel get begin count restCount sub dup 0 gt{{pop}repeat}{pop}ifelse args 0 argCount getinterval{}forall end/@dictStackLevel@dictStackLevel 1 sub def @dictStackCountByLevel @dictStackLevel get endcountdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse}bind def/@_PopStackLevels{Adobe_CoolType_Data begin/@opStackLevel @opStackLevel 1 subdef/@dictStackLevel @dictStackLevel 1 sub def end}bind def/@Raise{exch cvxexch errordict exch get exec stop}bind def/@ReRaise{cvx $error/errorname geterrordict exch get exec stop}bind def/@Stopped{0 @#Stopped}bind def/@#Stopped{@_SaveStackLevels stopped{@_RestoreStackLevels true}{@_PopStackLevels false}ifelse}bind def/@Arg{Adobe_CoolType_Data begin @opStackCountByLevel@opStackLevel 1 sub get/args get exch get end}bind def/doc_setup{Adobe_CoolType_Core begin/mov/moveto load def/nfnt/newencodedfont load def/mfnt/makefont load def/sfnt/setfont load def/ufnt/undefinefont load def/chp/charpath load def/awsh/awidthshow load def/wsh/widthshow load def/ash/ashowload def/sh/show load def end userdict/Adobe_CoolType_Data 6 dict dup begin/AddWidths? false def/CC 0 def/charcode 2 string def/@opStackCountByLevel 32dict def/@opStackLevel 0 def/@dictStackCountByLevel 32 dict def/@dictStackLevel 0 def end put}bind def/doc_trailer{currentdictAdobe_CoolType_Core eq{end}if}bind def/page_setup{Adobe_CoolType_Core begin}bind def/page_trailer{end}bind def/unload{systemdict/languagelevel known{systemdict/languagelevel get 2 ge{userdict/Adobe_CoolType_Core 2 copy known{undef}{pop pop}ifelse}if}if}bind def/ndf{1 index where{pop pop pop}{dup xcheck{bind}if def}ifelse}def/findfont dup systemdict begin userdict begin/globaldict where{/globaldict get begin}if dup where pop exch get/globaldictwhere{pop end}if end end def/systemfindfont/findfont load def/undefinefont{pop}ndf/copyfont{currentglobal 3 1 roll 1 index gcheck setglobal dup null eq{0}{dup length}ifelse 2 index length add 1 add dict begin exch{1 index/FID eq{poppop}{def}ifelse}forall dup null eq{pop}{{def}forall}ifelse currentdict endexch setglobal}bind def/copyarray{currentglobal exch dup gcheck setglobal duplength array copy exch setglobal}bind def/newencodedfont{currentglobal{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}{FontDirectory 3 index known{FontDirectory3 index get/FontReferenced known}{SharedFontDirectory 3 index known{SharedFontDirectory 3 index get/FontReferenced known}{false}ifelse}ifelse}ifelse dup{3 index findfont/FontReferenced get 2 index findfont ne{pop false}if}if{pop 1 index findfont/Encoding get exch 0 1 255{2 copy get 3 index 3 1roll put}for pop pop pop}{findfont dup dup maxlength 2 add dict begin exch{1index/FID ne{def}{pop pop}ifelse}forall/FontReferenced exch def/Encoding exchdup length array copy def/FontName 1 index dup type/stringtype eq{cvn}if defcurrentdict end definefont pop}ifelse}bind def/SetSubstituteStrategy{$SubstituteFont begin dup type/dicttype ne{0 dict}if currentdict/$Strategiesknown{exch $Strategies exch 2 copy known{get 2 copy maxlength exch maxlengthadd dict begin{def}forall{def}forall currentdict dup/$Init known{dup/$Init getexec}if end/$Strategy exch def}{pop pop pop}ifelse}{pop pop}ifelse end}binddef/scff{$SubstituteFont begin dup type/stringtype eq{dup length exch}{null}ifelse/$sname exch def/$slen exch def end{findfont}@Stopped{dup length dup 21add string dup 4 3 roll 0 exch 128 string cvs putinterval exch 1 index exch(_was-malformed-so-was)putinterval cvn{findfont}@Stopped{pop/Courier findfont}if}if $SubstituteFont begin/$sname null def/$slen 0 def end}bind def/isWidthsOnlyFont{dup/WidthsOnly known{pop pop true}{dup/FDepVector known{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}{dup/FDArray known{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}{pop}ifelse}ifelse}ifelse}bind def/?set{$SubstituteFont begin/$substituteFound false def/$fontname 4index def/$doSmartSub false def end 3 index findfont $SubstituteFont begin$substituteFound{false}{dup/FontName known{dup/FontName get $fontname eq 1index/DistillerFauxFont known not and/currentdistillerparams where{pop false 2index isWidthsOnlyFont not and}if}{false}ifelse}ifelse exch pop/$doSmartSubtrue def end{exch pop exch pop exch 2 dict dup/Found 3 index put exch findfontexch}{exch exec exch findfont 2 dict dup/Downloaded 6 5 roll put}ifelse dup/FontName 4 index put copyfont definefont pop}bind def/?str1 256 string def/?str2 256 string def/?add{1 index type/integertype eq{exch true 4 2}{false 31}ifelse roll 1 index findfont dup/Widths known{Adobe_CoolType_Data/AddWidths?true put gsave dup 1000 scalefont setfont}if/Downloaded known{exec exch{exch?str2 cvs exch findfont/Downloaded get 1 dict begin/Downloaded 1 index def?str1 cvs length ?str1 1 index 1 add 3 index putinterval exch length 1 add 1index add ?str1 2 index(*)putinterval ?str1 0 2 index getinterval cvn findfont?str1 3 index(+)putinterval 2 dict dup/FontName ?str1 0 6 index getintervalcvn put dup/Downloaded Downloaded put end copyfont dup/FontName get exchdefinefont pop pop pop}{pop}ifelse}{pop exch{findfont dup/Found get dup lengthexch ?str1 cvs pop ?str1 1 index(+)putinterval ?str1 1 index 1 add 4 index?str2 cvs putinterval ?str1 exch 0 exch 5 4 roll ?str2 cvs length 1 add addgetinterval cvn 1 dict exch 1 index exch/FontName exch put copyfont dup/FontName get exch definefont pop}{pop}ifelse}ifelse Adobe_CoolType_Data/AddWidths? get{grestore Adobe_CoolType_Data/AddWidths? false put}if}bind def/?sh{currentfont/Downloaded known{exch}if pop}bind def/?chp{currentfont/Downloaded known{pop}{false chp}ifelse}bind def/?mv{currentfont/Downloadedknown{moveto pop pop}{pop pop moveto}ifelse}bind def setpacking userdict/$SubstituteFont 25 dict put 1 dict begin/SubstituteFont dup $error exch 2copy known{get}{pop pop{pop/Courier}bind}ifelse def/currentdistillerparamswhere dup{pop pop currentdistillerparams/CannotEmbedFontPolicy 2 copy known{get/Error eq}{pop pop false}ifelse}if not{countdictstack array dictstack 0 getbegin userdict begin $SubstituteFont begin/$str 128 string def/$fontpat 128string def/$slen 0 def/$sname null def/$match false def/$fontname null def/$substituteFound false def/$doSmartSub true def/$depth 0 def/$fontname nulldef/$italicangle 26.5 def/$dstack null def/$Strategies 10 dict dup begin/$Type3Underprint{currentglobal exch false setglobal 11 dict begin/UseFontexch $WMode 0 ne{dup length dict copy dup/WMode $WMode put/UseFont exchdefinefont}if def/FontName $fontname dup type/stringtype eq{cvn}if def/FontType 3 def/FontMatrix[.001 0 0 .001 0 0]def/Encoding 256 array dup 0 1255{/.notdef put dup}for pop def/FontBBox[0 0 0 0]def/CCInfo 7 dict dup begin/cc null def/x 0 def/y 0 def end def/BuildChar{exch begin CCInfo begin 1string dup 0 3 index put exch pop/cc exch def UseFont 1000 scalefont setfontcc stringwidth/y exch def/x exch def x y setcharwidth $SubstituteFont/$Strategy get/$Underprint get exec 0 0 moveto cc show x y moveto end end}binddef currentdict end exch setglobal}bind def/$GetaTint 2 dict dup begin/$BuildFont{dup/WMode known{dup/WMode get}{0}ifelse/$WMode exch def $fontnameexch dup/FontName known{dup/FontName get dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse exch $deepcopyfont exch 1 index exch/FontBasedOn exch putdup/FontName $fontname dup type/stringtype eq{cvn}if put definefont}bind def/$Underprint{gsave x abs y abs gt{/y 1000 def}{/x -1000 def 500 120 translate}ifelse Level2?{[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]setcolorspace}{0setgray}ifelse 10 setlinewidth x .8 mul[7 3]{y mul 8 div 120 sub x 10 div exchmoveto 0 y 4 div neg rlineto dup 0 rlineto 0 y 4 div rlineto closepath gsaveLevel2?{.2 setcolor}{.8 setgray}ifelse fill grestore stroke}forall popgrestore}bind def end def/$Oblique 1 dict dup begin/$BuildFont{currentglobalexch dup gcheck setglobal null copyfont begin/FontBasedOn currentdict/FontNameknown{FontName dup type/stringtype eq{cvn}if}{/unnamedfont}ifelse def/FontName$fontname dup type/stringtype eq{cvn}if def/currentdistillerparams where{pop}{/FontInfo currentdict/FontInfo known{FontInfo null copyfont}{2 dict}ifelse dupbegin/ItalicAngle $italicangle def/FontMatrix FontMatrix[1 0 ItalicAngle dupsin exch cos div 1 0 0]matrix concatmatrix readonly end 4 2 roll def def}ifelse FontName currentdict end definefont exch setglobal}bind def end def/$None 1 dict dup begin/$BuildFont{}bind def end def end def/$ObliqueSetSubstituteStrategy/$findfontByEnum{dup type/stringtype eq{cvn}if dup/$fontname exch def $sname null eq{$str cvs dup length $slen sub $slengetinterval}{pop $sname}ifelse $fontpat dup 0(fonts/*)putinterval exch 7 exchputinterval/$match false def $SubstituteFont/$dstack countdictstack arraydictstack put mark{$fontpat 0 $slen 7 add getinterval{/$match exch def exit}$str filenameforall}stopped{cleardictstack currentdict true $SubstituteFont/$dstack get{exch{1 index eq{pop false}{true}ifelse}{begin false}ifelse}forallpop}if cleartomark/$slen 0 def $match false ne{$match(fonts/)anchorsearch poppop cvn}{/Courier}ifelse}bind def/$ROS 1 dict dup begin/Adobe 4 dict dup begin/Japan1[/Ryumin-Light/HeiseiMin-W3/GothicBBB-Medium/HeiseiKakuGo-W5/HeiseiMaruGo-W4/Jun101-Light]def/Korea1[/HYSMyeongJo-Medium/HYGoThic-Medium]def/GB1[/STSong-Light/STHeiti-Regular]def/CNS1[/MKai-Medium/MHei-Medium]defend def end def/$cmapname null def/$deepcopyfont{dup/FontType get 0 eq{1 dictdup/FontName/copied put copyfont begin/FDepVector FDepVector copyarray 0 1 2index length 1 sub{2 copy get $deepcopyfont dup/FontName/copied put/copiedexch definefont 3 copy put pop pop}for def currentdict end}{$Strategies/$Type3Underprint get exec}ifelse}bind def/$buildfontname{length $str 1 index(-)putinterval 1 add $str 1 index $cmapname $fontpat cvs putinterval $cmapnamelength add $str exch 0 exch getinterval cvn}bind def/$findfontByROS{/$fontnameexch def $ROS Registry 2 copy known{get Ordering 2 copy known{get}{pop pop[]}ifelse}{pop pop[]}ifelse false exch{dup/CIDFont resourcestatus{pop pop save 1index/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get}{false}ifelse exch pop exch restore{pop}{exch pop true exit}ifelse}{pop}ifelse}forall{$str cvs $buildfontname}{false(*){save exch dup/CIDFont findresource dup/WidthsOnly known{dup/WidthsOnly get not}{true}ifelse exch/CIDSystemInfo getdup/Registry get Registry eq exch/Ordering get Ordering eq and and{exchrestore exch pop true exit}{pop restore}ifelse}$str/CIDFont resourceforall{$buildfontname}{$fontname $findfontByEnum}ifelse}ifelse}bind def end endcurrentdict/$error known currentdict/languagelevel known and dup{pop $error/SubstituteFont known}if dup{$error}{Adobe_CoolType_Core}ifelse begin{/SubstituteFont/CMap/Category resourcestatus{pop pop{$SubstituteFont begin/$substituteFound true def dup length $slen gt $sname null ne or $slen 0 gtand{$sname null eq{dup $str cvs dup length $slen sub $slen getinterval cvn}{$sname}ifelse dup/CMap resourcestatus{pop pop dup/$cmapname exch def/CMapfindresource/CIDSystemInfo get{def}forall $findfontByROS}{128 string cvs dup(-)search{3 1 roll search{3 1 roll pop{dup cvi}stopped{pop pop pop pop pop$findfontByEnum}{4 2 roll pop pop exch length exch 2 index length 2 index subexch 1 sub -1 0{$str cvs dup length 4 index 0 4 index 4 3 roll add getintervalexch 1 index exch 3 index exch putinterval dup/CMap resourcestatus{pop pop 4 1roll pop pop pop dup/$cmapname exch def/CMap findresource/CIDSystemInfo get{def}forall $findfontByROS true exit}{pop}ifelse}for dup type/booleantype eq{pop}{pop pop $findfontByEnum}ifelse}ifelse}{pop pop pop $findfontByEnum}ifelse}{pop pop $findfontByEnum}ifelse}ifelse}{//SubstituteFont exec}ifelse/$slen 0def end}}{{$SubstituteFont begin/$substituteFound true def dup length $slen gt$sname null ne or $slen 0 gt and{$findfontByEnum}{//SubstituteFont exec}ifelseend}}ifelse bind readonly def Adobe_CoolType_Core/scfindfont/systemfindfontload put}{/scfindfont{$SubstituteFont begin dup systemfindfont dup/FontNameknown{dup/FontName get dup 3 index ne}{/noname true}ifelse dup{/$origfontnamefound 2 index def/$origfontname 4 index def/$substituteFoundtrue def}if exch pop{$slen 0 gt $sname null ne 3 index length $slen gt or and{pop dup $findfontByEnum findfont dup maxlength 1 add dict begin{1 index/FID eq{pop pop}{def}ifelse}forall currentdict end definefont dup/FontName known{dup/FontName get}{null}ifelse $origfontnamefound ne{$origfontname $str cvs print( substitution revised, using )print dup/FontName known{dup/FontName get}{(unspecified font)}ifelse $str cvs print(.)print}if}{exch pop}ifelse}{exch pop}ifelse end}bind def}ifelse end endAdobe_CoolType_Core/findfont{$SubstituteFont begin $depth 0 eq{/$fontname 1index dup type/stringtype ne{$str cvs}if def/$substituteFound false def}if/$depth $depth 1 add def end scfindfont $SubstituteFont begin/$depth $depth 1sub def $substituteFound $depth 0 eq and $doSmartSub and{currentdict/$Strategyknown{$Strategy/$BuildFont get exec}if}if end}bind put}if end end%%EndResource%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.13 0%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated.%%Version: 1.13 0systemdict/languagelevel known dup{currentglobal false setglobal}{false}ifelseexch userdict/Adobe_CoolType_Utility 2 copy known{2 copy get dup maxlength 25add dict copy}{25 dict}ifelse put Adobe_CoolType_Utility begin/ct_Level2? exchdef/ct_Clone? 1183615869 internaldict dup/CCRun known not exch/eCCRun knownnot ct_Level2? and or def/ct_UseNativeCapability? systemdict/composefont knowndef/ct_MakeOCF 35 dict def/ct_Vars 25 dict def/ct_GlyphDirProcs 6 dict def/ct_BuildCharDict 15 dict dup begin/charcode 2 string def/dst_string 1500string def/nullstring()def/usewidths? true def end def ct_Level2?{setglobal}{pop}ifelse ct_GlyphDirProcs begin/GetGlyphDirectory{systemdict/languagelevelknown{pop/CIDFont findresource/GlyphDirectory get}{1 index/CIDFontfindresource/GlyphDirectory get dup type/dicttype eq{dup dup maxlength exchlength sub 2 index lt{dup length 2 index add dict copy 2 index/CIDFontfindresource/GlyphDirectory 2 index put}if}if exch pop exch pop}ifelse +}def/+{systemdict/languagelevel known{currentglobal false setglobal 3 dict begin/vmexch def}{1 dict begin}ifelse/$ exch def systemdict/languagelevel known{vmsetglobal/gvm currentglobal def $ gcheck setglobal}if ?{$ begin}if}def/?{$type/dicttype eq}def/|{userdict/Adobe_CoolType_Data known{Adobe_CoolType_Data/AddWidths? known{currentdict Adobe_CoolType_Data begin begin AddWidths?{Adobe_CoolType_Data/CC 3 index put ?{def}{$ 3 1 roll put}ifelse CC charcodeexch 1 index 0 2 index 256 idiv put 1 index exch 1 exch 256 mod putstringwidth 2 array astore currentfont/Widths get exch CC exch put}{?{def}{$ 31 roll put}ifelse}ifelse end end}{?{def}{$ 3 1 roll put}ifelse}ifelse}{?{def}{$ 3 1 roll put}ifelse}ifelse}def/!{?{end}if systemdict/languagelevel known{gvmsetglobal}if end}def/:{string currentfile exch readstring pop}executeonly defend ct_MakeOCF begin/ct_cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_CID_STR_SIZE 8000 def/ct_mkocfStr100 100 string def/ct_defaultFontMtx[.0010 0 .001 0 0]def/ct_1000Mtx[1000 0 0 1000 0 0]def/ct_raise{exch cvx excherrordict exch get exec stop}bind def/ct_reraise{cvx $error/errorname get(Error: )print dup(                    )cvs print errordict exch get exec stop}bind def/ct_cvnsi{1 index add 1 sub 1 exch 0 4 1 roll{2 index exch get exch 8bitshift add}for exch pop}bind def/ct_GetInterval{Adobe_CoolType_Utility/ct_BuildCharDict get begin/dst_index 0 def dup dst_string length gt{dupstring/dst_string exch def}if 1 index ct_CID_STR_SIZE idiv/arrayIndex exch def2 index arrayIndex get 2 index arrayIndex ct_CID_STR_SIZE mul sub{dup 3 indexadd 2 index length le{2 index getinterval dst_string dst_index 2 indexputinterval length dst_index add/dst_index exch def exit}{1 index length 1index sub dup 4 1 roll getinterval dst_string dst_index 2 index putintervalpop dup dst_index add/dst_index exch def sub/arrayIndex arrayIndex 1 add def 2index dup length arrayIndex gt{arrayIndex get}{pop exit}ifelse 0}ifelse}looppop pop pop dst_string 0 dst_index getinterval end}bind def ct_Level2?{/ct_resourcestatus currentglobal mark true setglobal{/unknowninstancename/Category resourcestatus}stopped{cleartomark setglobal true}{cleartomarkcurrentglobal not exch setglobal}ifelse{{mark 3 1 roll/Category findresourcebegin ct_Vars/vm currentglobal put({ResourceStatus} stopped)0()/SubFileDecodefilter cvx exec{cleartomark false}{{3 2 roll pop true}{cleartomark false}ifelse}ifelse ct_Vars/vm get setglobal end}}{{resourcestatus}}ifelse bind def/CIDFont/Category ct_resourcestatus{pop pop}{currentglobal true setglobal/Generic/Category findresource dup length dict copy dup/InstanceType/dicttypeput/CIDFont exch/Category defineresource pop setglobal}ifelsect_UseNativeCapability?{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CIDSystemInfo 3 dict dup begin/Registry(Adobe)def/Ordering(Identity)def/Supplement 0 def end def/CMapName/Identity-H def/CMapVersion 1 def/CMapType 1 def 1 begincodespacerange<0000><ffff>endcodespacerange 1begincidrange<0000><ffff>0 endcidrange endcmap CMapName currentdict/CMapdefineresource pop end end}if}{/ct_Category 2 dict begin/CIDFont 10 dict def/ProcSet 2 dict def currentdict end def/defineresource{ct_Category 1 index 2copy known{get dup dup maxlength exch length eq{dup length 10 add dict copyct_Category 2 index 2 index put}if 3 index 3 index put pop exch pop}{pop pop/defineresource/undefined ct_raise}ifelse}bind def/findresource{ct_Category 1index 2 copy known{get 2 index 2 copy known{get 3 1 roll pop pop}{pop pop/findresource/undefinedresource ct_raise}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/resourcestatus{ct_Category 1 index 2 copyknown{get 2 index known exch pop exch pop{0 -1 true}{false}ifelse}{pop pop/findresource/undefined ct_raise}ifelse}bind def/ct_resourcestatus/resourcestatus load def}ifelse/ct_CIDInit 2 dict begin/ct_cidfont_stream_init{{dup(Binary)eq{pop null currentfile ct_Level2?{{cid_BYTE_COUNT()/SubFileDecode filter}stopped{pop pop pop}if}if/readstring load exit}if dup(Hex)eq{pop currentfile ct_Level2?{{null exch/ASCIIHexDecode filter/readstring}stopped{pop exch pop(>)exch/readhexstring}if}{(>)exch/readhexstring}ifelseload exit}if/StartData/typecheck ct_raise}loop cid_BYTE_COUNT ct_CID_STR_SIZEle{2 copy cid_BYTE_COUNT string exch exec pop 1 array dup 3 -1 roll 0 exch put}{cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi dup array exch 2 sub 0 exch 1exch{2 copy 5 index ct_CID_STR_SIZE string 6 index exec pop put pop}for 2index cid_BYTE_COUNT ct_CID_STR_SIZE mod string 3 index exec pop 1 index exch1 index length 1 sub exch put}ifelse cid_CIDFONT exch/GlyphData exch put 2index null eq{pop pop pop}{pop/readstring load 1 string exch{3 copy exec popdup length 0 eq{pop pop pop pop pop true exit}if 4 index eq{pop pop pop popfalse exit}if}loop pop}ifelse}bind def/StartData{mark{currentdict dup/FDArrayget 0 get/FontMatrix get 0 get .001 eq{dup/CDevProc known not{/CDevProc1183615869 internaldict/stdCDevProc 2 copy known{get}{pop pop{pop pop pop poppop 0 -1000 7 index 2 div 880}}ifelse def}if}{/CDevProc{pop pop pop pop pop 01 cid_temp/cid_CIDFONT get/FDArray get 0 get/FontMatrix get 0 get div 7 index2 div 1 index .88 mul}def}ifelse/cid_temp 15 dict def cid_temp begin/cid_CIDFONT exch def 3 copy pop dup/cid_BYTE_COUNT exch def 0 gt{ct_cidfont_stream_init FDArray{/Private get dup/SubrMapOffset known{begin/Subrs SubrCount array def Subrs SubrMapOffset SubrCount SDBytes ct_Level2?{currentdict dup/SubrMapOffset undef dup/SubrCount undef/SDBytes undef}if end/cid_SD_BYTES exch def/cid_SUBR_COUNT exch def/cid_SUBR_MAP_OFFSET exch def/cid_SUBRS exch def cid_SUBR_COUNT 0 gt{GlyphData cid_SUBR_MAP_OFFSETcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi 0 1 cid_SUBR_COUNT 1 sub{exch 1 index 1 add cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add GlyphData exchcid_SD_BYTES ct_GetInterval 0 cid_SD_BYTES ct_cvnsi cid_SUBRS 4 2 rollGlyphData exch 4 index 1 index sub ct_GetInterval dup length string copy put}for pop}if}{pop}ifelse}forall}if cleartomark pop pop end CIDFontNamecurrentdict/CIDFont defineresource pop end end}stopped{cleartomark/StartDatact_reraise}if}bind def currentdict end def/ct_saveCIDInit{/CIDInit/ProcSetct_resourcestatus{true}{/CIDInitC/ProcSet ct_resourcestatus}ifelse{pop pop/CIDInit/ProcSet findresource ct_UseNativeCapability?{pop null}{/CIDInitct_CIDInit/ProcSet defineresource pop}ifelse}{/CIDInit ct_CIDInit/ProcSetdefineresource pop null}ifelse ct_Vars exch/ct_oldCIDInit exch put}bind def/ct_restoreCIDInit{ct_Vars/ct_oldCIDInit get dup null ne{/CIDInit exch/ProcSetdefineresource pop}{pop}ifelse}bind def/ct_BuildCharSetUp{1 index beginCIDFont begin Adobe_CoolType_Utility/ct_BuildCharDict get begin/ct_dfCharCodeexch def/ct_dfDict exch def CIDFirstByte ct_dfCharCode add dup CIDCount ge{pop0}if/cid exch def{GlyphDirectory cid 2 copy known{get}{pop pop nullstring}ifelse dup length FDBytes sub 0 gt{dup FDBytes 0 ne{0 FDBytes ct_cvnsi}{pop 0}ifelse/fdIndex exch def dup length FDBytes sub FDBytes exch getinterval/charstring exch def exit}{pop cid 0 eq{/charstring nullstring def exit}if/cid0 def}ifelse}loop}def/ct_SetCacheDevice{0 0 moveto dup stringwidth 3 -1 rolltrue charpath pathbbox 0 -1000 7 index 2 div 880 setcachedevice2 0 0 moveto}def/ct_CloneSetCacheProc{1 eq{stringwidth pop -2 div -880 0 -1000 setcharwidthmoveto}{usewidths?{currentfont/Widths get cid 2 copy known{get exch pop aloadpop}{pop pop stringwidth}ifelse}{stringwidth}ifelse setcharwidth 0 0 moveto}ifelse}def/ct_Type3ShowCharString{ct_FDDict fdIndex 2 copy known{get}{currentglobal 3 1 roll 1 index gcheck setglobal ct_Type1FontTemplate dupmaxlength dict copy begin FDArray fdIndex get dup/FontMatrix 2 copy known{get}{pop pop ct_defaultFontMtx}ifelse/FontMatrix exch dup length array copy def/Private get/Private exch def/Widths rootfont/Widths get def/CharStrings 1dict dup/.notdef<d841272cf18f54fc13>dup length string copy put def currentdictend/ct_Type1Font exch definefont dup 5 1 roll put setglobal}ifelse dup/CharStrings get 1 index/Encoding get ct_dfCharCode get charstring putrootfont/WMode 2 copy known{get}{pop pop 0}ifelse exch 1000 scalefont setfontct_str1 0 ct_dfCharCode put ct_str1 exch ct_dfSetCacheProc ct_SyntheticBold{currentpoint ct_str1 show newpath moveto ct_str1 true charpath ct_StrokeWidthsetlinewidth stroke}{ct_str1 show}ifelse}def/ct_Type4ShowCharString{ct_dfDictct_dfCharCode charstring FDArray fdIndex get dup/FontMatrix get dupct_defaultFontMtx ct_matrixeq not{ct_1000Mtx matrix concatmatrix concat}{pop}ifelse/Private get Adobe_CoolType_Utility/ct_Level2? get not{ct_dfDict/Private3 -1 roll{put}1183615869 internaldict/superexec get exec}if 1183615869internaldict Adobe_CoolType_Utility/ct_Level2? get{1 index}{3 index/Privateget mark 6 1 roll}ifelse dup/RunInt known{/RunInt get}{pop/CCRun}ifelse getexec Adobe_CoolType_Utility/ct_Level2? get not{cleartomark}if}bind def/ct_BuildCharIncremental{{Adobe_CoolType_Utility/ct_MakeOCF get beginct_BuildCharSetUp ct_ShowCharString}stopped{stop}if end end end end}bind def/BaseFontNameStr(BF00)def/ct_Type1FontTemplate 14 dict begin/FontType 1 def/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encodingct_cHexEncoding def/PaintType 0 def currentdict end def/BaseFontTemplate 11dict begin/FontMatrix[.001 0 0 .001 0 0]def/FontBBox[-250 -250 1250 1250]def/Encoding ct_cHexEncoding def/BuildChar/ct_BuildCharIncremental load defct_Clone?{/FontType 3 def/ct_ShowCharString/ct_Type3ShowCharString load def/ct_dfSetCacheProc/ct_CloneSetCacheProc load def/ct_SyntheticBold false def/ct_StrokeWidth 1 def}{/FontType 4 def/Private 1 dict dup/lenIV 4 put def/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def/PaintType 0 def/ct_ShowCharString/ct_Type4ShowCharString load def}ifelse/ct_str1 1 string defcurrentdict end def/BaseFontDictSize BaseFontTemplate length 5 add def/ct_matrixeq{true 0 1 5{dup 4 index exch get exch 3 index exch get eq and dupnot{exit}if}for exch pop exch pop}bind def/ct_makeocf{15 dict begin exch/WModeexch def exch/FontName exch def/FontType 0 def/FMapType 2 def/FontMatrixmatrix def/bfCount 1 index/CIDCount get 256 idiv 1 add dup 256 gt{pop 256}ifdef/Encoding 256 array 0 1 bfCount 1 sub{2 copy dup put pop}for bfCount 1 255{2 copy bfCount put pop}for def/FDepVector bfCount dup 256 lt{1 add}if arraydef BaseFontTemplate BaseFontDictSize dict copy begin/CIDFont exch def CIDFont/FontBBox known{CIDFont/FontBBox get/FontBBox exch def}if CIDFont/CDevProcknown{CIDFont/CDevProc get/CDevProc exch def}if currentdict endBaseFontNameStr 3(0)putinterval 0 1 bfCount dup 256 eq{1 sub}if{FDepVectorexch 2 index BaseFontDictSize dict copy begin dup/CIDFirstByte exch 256 muldef FontType 3 eq{/ct_FDDict 2 dict def}if currentdict end 1 index 16BaseFontNameStr 2 2 getinterval cvrs pop BaseFontNameStr exch definefont put}for ct_Clone?{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}if FontName currentdict end definefont ct_Clone?{gsave dup 1000 scalefontsetfont ct_BuildCharDict begin/usewidths? false def currentfont/Widths getbegin exch/CIDFont get/GlyphDirectory get{pop dup charcode exch 1 index 0 2index 256 idiv put 1 index exch 1 exch 256 mod put stringwidth 2 array astoredef}forall end/usewidths? true def end grestore}{exch pop}ifelse}bind def/ct_ComposeFont{ct_UseNativeCapability?{2 index/CMap ct_resourcestatus{pop popexch pop}{/CIDInit/ProcSet findresource begin 12 dict begin begincmap/CMapName3 index def/CMapVersion 1 def/CMapType 1 def exch/WMode exch def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{3 2 roll pop 0 get/CIDFont findresource ct_makeocf}ifelse}bind def/ct_MakeIdentity{ct_UseNativeCapability?{1 index/CMapct_resourcestatus{pop pop}{/CIDInit/ProcSet findresource begin 12 dict beginbegincmap/CMapName 2 index def/CMapVersion 1 def/CMapType 1 def/CIDSystemInfo3 dict dup begin/Registry(Adobe)def/Ordering CMapName ct_mkocfStr100 cvs(Adobe-)search{pop pop(-)search{dup length string copy exch pop exch pop}{pop(Identity)}ifelse}{pop(Identity)}ifelse def/Supplement 0 def end def 1begincodespacerange<0000><ffff>endcodespacerange 1 begincidrange<0000><ffff>0endcidrange endcmap CMapName currentdict/CMap defineresource pop end end}ifelse composefont}{exch pop 0 get/CIDFont findresource ct_makeocf}ifelse}binddef currentdict readonly pop end end%%EndResourceAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0%%Version: 1.0 0%%Copyright: Copyright (C) 2000-2000 Adobe Systems, Inc.  All Rights Reserved.systemdict /setpacking known{	currentpacking	true setpacking} ifuserdict /Adobe_AGM_Image 65 dict dup begin put/Adobe_AGM_Image_Id /Adobe_AGM_Image_1.0_0 def/nd{	null def}bind def/AGMIMG_&image nd/AGMIMG_&colorimage nd%%don't initialize AGMIMG_&customcolorimage, it wrecks havoc in a nested environment%%AGMIMG_ccimage_exists not {/AGMIMG_&customcolorimage nd} if /AGMIMG_&imagemask nd/AGMIMG_mbuf () def/AGMIMG_ybuf () def/AGMIMG_kbuf () def/AGMIMG_c 0 def/AGMIMG_m 0 def/AGMIMG_y 0 def/AGMIMG_k 0 def/AGMIMG_tmp nd/AGMIMG_imagestring0 nd/AGMIMG_imagestring1 nd/AGMIMG_imagestring2 nd/AGMIMG_imagestring3 nd/AGMIMG_imagestring4 nd/AGMIMG_imagestring5 nd/AGMIMG_cnt nd/AGMIMG_fsave nd/AGMIMG_colorAry nd/AGMIMG_override nd/AGMIMG_name nd/invert_image_samples nd/knockout_image_samples	nd/img nd/sepimg nd/idximg nd/doc_setup{ 	Adobe_AGM_Core begin	Adobe_AGM_Image begin	/AGMIMG_&image systemdict/image get def	/AGMIMG_&imagemask systemdict/imagemask get def	/colorimage where{		pop		/AGMIMG_&colorimage /colorimage ldf	}if	end	end}def/page_setup{	Adobe_AGM_Image begin	/AGMIMG_ccimage_exists {/customcolorimage where 		{			pop			/Adobe_AGM_OnHost_Seps where			{			pop false			}{			/Adobe_AGM_InRip_Seps where				{				pop false				}{					true				 }ifelse			 }ifelse			}{			false		}ifelse 	}bdf	level2{		/invert_image_samples		{			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf			/Decode [ Decode 1 get Decode 0 get] def		}def		/knockout_image_samples		{			Operator/imagemask ne{				/Decode [1 1] def			}if		}def	}{			/invert_image_samples		{			{1 exch sub} currenttransfer addprocs settransfer		}def		/knockout_image_samples		{			{ pop 1 } currenttransfer addprocs settransfer		}def	}ifelse	/img /imageormask ldf	/sepimg /sep_imageormask ldf	/idximg /indexed_imageormask ldf	currentdict{		dup xcheck 1 index type dup /arraytype eq exch /packedarraytype eq or and{			bind		}if		def	}forall}def/page_trailer{	end}def/doc_trailer{}def/imageormask_sys{	begin		save mark		level2{			currentdict			Operator /imagemask eq{				AGMIMG_&imagemask			}{				AGMIMG_&image			}ifelse		}{			Width Height			Operator /imagemask eq{				Decode 0 get 1 eq Decode 1 get 0 eq	and				ImageMatrix /DataSource load				AGMIMG_&imagemask			}{				BitsPerComponent ImageMatrix /DataSource load				AGMIMG_&image			}ifelse		}ifelse		cleartomark restore	end}def/overprint_plate{	currentoverprint{		0 get		dup /DeviceGray eq{			pop AGMCORE_black_plate not		}{			/DeviceCMYK eq{				AGMCORE_is_cmyk_sep not			}if		}ifelse	}{		false	}ifelse}def/imageormask{	begin		SkipImageProc not{			save mark			level2 AGMCORE_host_sep not and{				currentdict				Operator /imagemask eq{					imagemask				}{					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get /DeviceGray eq and{						[/Separation /Black /DeviceGray {}] setcolorspace						/Decode [ Decode 1 get Decode 0 get ] def					}if					image				}ifelse			}{				Width Height				Operator /imagemask eq{					Decode 0 get 1 eq Decode 1 get 0 eq	and					ImageMatrix /DataSource load					AGMCORE_host_sep{						currentgray 1 ne{							currentdict imageormask_sys						}{  	 						currentoverprint not{  			 					1 AGMCORE_&setgray  	 							knockout_image_samples  			 					currentdict imageormask_sys  			 				}{  			 					currentdict ignoreimagedata  			 				}ifelse				 		}ifelse					}{						imagemask					}ifelse				}{					BitsPerComponent ImageMatrix 					MultipleDataSources{						0 1 NComponents 1 sub{							DataSource exch get						}for					}{						/DataSource load					}ifelse					Operator /colorimage eq{						AGMCORE_host_sep{							MultipleDataSources level2 or NComponents 4 eq and{								MultipleDataSources{									4 {pop} repeat									/DataSource [										DataSource 0 get /exec cvx										DataSource 1 get /exec cvx										DataSource 2 get /exec cvx										DataSource 3 get /exec cvx										/AGMCORE_get_ink_data cvx									] cvx def								}{									/DataSource /DataSource load filter_cmyk 0 () /SubFileDecode filter def								}ifelse									/Decode [ Decode 0 get Decode 1 get ] def								/MultipleDataSources false def								/NComponents 1 def								/Operator /image def								AGMCORE_is_cmyk_sep{									currentoverprint InksUsed current_ink not and{										currentdict consumeimagedata									}{										invert_image_samples						 				1 AGMCORE_&setgray										currentdict imageormask_sys									}ifelse								}{										currentdict ignoreimagedata								}ifelse							}{																	MultipleDataSources NComponents AGMIMG_&colorimage													}ifelse						}{							true NComponents colorimage						}ifelse					}{						Operator /image eq{							AGMCORE_host_sep{								/DoImage true def								HostSepColorImage{									invert_image_samples								}{									AGMCORE_black_plate not{										/DoImage false def										currentdict ignoreimagedata					 				}if								}ifelse						 		1 AGMCORE_&setgray								DoImage									{currentdict imageormask_sys} if							}{								image							}ifelse						}{							Operator/knockout eq{								pop pop pop pop pop								currentoverprint InksUsed current_ink not and{								}{									currentcolorspace overprint_plate not{										knockout_unitsq									}if								}ifelse							}if						}ifelse					}ifelse				}ifelse			}ifelse			cleartomark restore		}if	end}def/sep_imageormask{ 	/sep_colorspace_dict AGMCORE_gget begin	/MappedCSA CSA map_csa def	begin	SkipImageProc not{		save mark 			AGMCORE_avoid_L2_sep_space{			/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def		}if 		AGMIMG_ccimage_exists 		MappedCSA 0 get /DeviceCMYK eq and		currentdict/Components known and 		Name () ne and 		Name (All) ne and 		Operator /image eq and		AGMCORE_producing_seps not and		level2 not and		{			Width Height BitsPerComponent ImageMatrix 			[			/DataSource load /exec cvx			{				0 1 2 index length 1 sub{					1 index exch					2 copy get 255 xor put				}for			} /exec cvx			] cvx bind			MappedCSA 0 get /DeviceCMYK eq{				Components aload pop			}{				0 0 0 Components aload pop 1 exch sub			}ifelse			Name findcmykcustomcolor			customcolorimage		}{			AGMCORE_producing_seps not{				level2{					AGMCORE_avoid_L2_sep_space not currentcolorspace 0 get /Separation ne and{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentdict imageormask				}{ 					currentdict					Operator /imagemask eq{						imageormask					}{						sep_imageormask_lev1					}ifelse				}ifelse 			}{				AGMCORE_host_sep{					Operator/knockout eq{						currentoverprint InksUsed current_ink not and{						}{							currentdict/ImageMatrix get concat							knockout_unitsq						}ifelse					}{						currentgray 1 ne{ 							AGMCORE_is_cmyk_sep Name (All) ne and{ 								level2{	 								[ /Separation Name [/DeviceGray]	 								{ 	 									sep_colorspace_proc AGMCORE_get_ink_data										1 exch sub	 								} bind									] AGMCORE_&setcolorspace									/sep_tint AGMCORE_gget AGMCORE_&setcolor 									currentdict imageormask_sys	 							}{	 								currentdict									Operator /imagemask eq{										imageormask_sys									}{										sep_image_lev1_sep									}ifelse	 							}ifelse 							}{ 								Operator/imagemask ne{									invert_image_samples 								}if		 						currentdict imageormask_sys 							}ifelse 						}{							currentdict consumeimagedata  							currentoverprint not Name (All) eq or{								gsave 								knockout_unitsq								grestore		 					}if 						}ifelse		 			}ifelse 				}{					currentcolorspace 0 get /Separation ne{						[/Separation Name MappedCSA sep_proc_name exch 0 get exch load ] setcolorspace_opt						/sep_tint AGMCORE_gget setcolor					}if					currentoverprint 					MappedCSA 0 get /DeviceCMYK eq and 					Name inRip_spot_has_ink not and 					Name (All) ne and {						imageormask_l2_overprint					}{						currentdict imageormask 					}ifelse				}ifelse			}ifelse		}ifelse		cleartomark restore	}if	end	end}def/imageormask_l2_overprint{		currentdict	currentcmykcolor add add add 0 eq{		currentdict consumeimagedata	}{		level3{ 									currentcmykcolor 			/AGMIMG_k xdf 			/AGMIMG_y xdf 			/AGMIMG_m xdf 			/AGMIMG_c xdf			Operator/imagemask eq{				[/DeviceN [				AGMIMG_c 0 ne {/Cyan} if				AGMIMG_m 0 ne {/Magenta} if				AGMIMG_y 0 ne {/Yellow} if				AGMIMG_k 0 ne {/Black} if				] /DeviceCMYK {}] setcolorspace								AGMIMG_c 0 ne {AGMIMG_c} if				AGMIMG_m 0 ne {AGMIMG_m} if				AGMIMG_y 0 ne {AGMIMG_y} if				AGMIMG_k 0 ne {AGMIMG_k} if				setcolor						}{					/Decode [ Decode 0 get 255 mul Decode 1 get 255 mul ] def				[/Indexed 									[						/DeviceN [							AGMIMG_c 0 ne {/Cyan} if							AGMIMG_m 0 ne {/Magenta} if							AGMIMG_y 0 ne {/Yellow} if							AGMIMG_k 0 ne {/Black} if						] 						/DeviceCMYK {							AGMIMG_k 0 eq {0} if							AGMIMG_y 0 eq {0 exch} if							AGMIMG_m 0 eq {0 3 1 roll} if							AGMIMG_c 0 eq {0 4 1 roll} if												}					]					255					{						255 div 								mark exch						dup	dup dup														AGMIMG_k 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_y 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse								AGMIMG_m 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop									counttomark 1 roll						}{							pop						}ifelse													AGMIMG_c 0 ne{							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop									counttomark 1 roll						}{							pop						}ifelse						counttomark 1 add -1 roll pop					}				] setcolorspace			}ifelse						imageormask_sys		}{	write_image_file{		currentcmykcolor		0 ne{			[/Separation /Black /DeviceGray {}] setcolorspace			gsave			/Black			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 1 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Yellow /DeviceGray {}] setcolorspace			gsave			/Yellow			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 2 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Magenta /DeviceGray {}] setcolorspace			gsave			/Magenta			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {4 3 roll pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		}if		0 ne{			[/Separation /Cyan /DeviceGray {}] setcolorspace			gsave			/Cyan 			[{1 exch sub /sep_tint AGMCORE_gget mul} /exec cvx MappedCSA sep_proc_name cvx exch pop {pop pop pop 1 exch sub} /exec cvx]			cvx modify_halftone_xfer			Operator currentdict read_image_file			grestore		} if				close_image_file			}{				imageormask			}ifelse		}ifelse	}ifelse} def/indexed_imageormask{	begin		save mark 	 		currentdict 		AGMCORE_host_sep{ 						Operator/knockout eq{				/indexed_colorspace_dict AGMCORE_gget /CSA get map_csa overprint_plate not{					knockout_unitsq				}if			}{	 			AGMCORE_is_cmyk_sep{					Operator /imagemask eq{						imageormask_sys					}{						level2{							indexed_image_lev2_sep						}{							indexed_image_lev1_sep						}ifelse					}ifelse				}{					currentoverprint not{						knockout_image_samples		 				imageormask_sys		 			}{		 				currentdict consumeimagedata		 			}ifelse				}ifelse			}ifelse 		}{			level2{				imageormask			}{ 				Operator /imagemask eq{					imageormask				}{					indexed_imageormask_lev1				}ifelse			}ifelse 		}ifelse		cleartomark restore	end}def/indexed_image_lev2_sep{	/indexed_colorspace_dict AGMCORE_gget begin	begin				currentcolorspace 		dup 1 /DeviceGray put		dup 3 [			currentcolorspace 3 get 			{				exch 4 mul 4 getinterval {} forall				AGMCORE_get_ink_data 255 div 1 exch sub			} /exec cvx		] cvx put		setcolorspace				currentdict 		Operator /imagemask eq{			AGMIMG_&imagemask		}{			AGMIMG_&image		}ifelse				end end}def/OPIimage{	dup type /dicttype ne{		10 dict begin			/DataSource xdf			/ImageMatrix xdf			/BitsPerComponent xdf			/Height xdf			/Width xdf			/ImageType 1 def			/Decode [0 1 def]			currentdict		end	}if	dup begin		/NComponents 1 cdndf		/MultipleDataSources false cdndf		/SkipImageProc {false} cdndf		/HostSepColorImage false cdndf		/Decode [				0 				currentcolorspace 0 get /Indexed eq{					2 BitsPerComponent exp 1 sub				}{					1				}ifelse		] cdndf		/Operator /image cdndf	end	/sep_colorspace_dict AGMCORE_gget null eq{		imageormask	}{		gsave		dup begin invert_image_samples end		sep_imageormask		grestore	}ifelse}def/spot_alias{	/mapto_sep_imageormask 	{		dup type /dicttype ne{			12 dict begin				/ImageType 1 def				/DataSource xdf				/ImageMatrix xdf				/BitsPerComponent xdf				/Height xdf				/Width xdf				/MultipleDataSources false def		}{			begin		}ifelse				/Decode [/customcolor_tint AGMCORE_gget 0] def				/Operator /image def				/HostSepColorImage false def				/InksUsed [] def				/SkipImageProc {false} def				currentdict 			end		sep_imageormask	}bdf	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_colorAry xddf		/customcolor_tint AGMCORE_gget		bdict			/Name AGMIMG_colorAry 4 get			/CSA [ /DeviceCMYK ] 			/TintMethod /Subtractive			/TintProc null			/MappedCSA null			/NComponents 4 			/Components [ AGMIMG_colorAry aload pop pop ] 		edict		setsepcolorspace		mapto_sep_imageormask	}ndf	Adobe_AGM_Image/AGMIMG_&customcolorimage /customcolorimage load put	/customcolorimage	{		Adobe_AGM_Image/AGMIMG_override false put		dup 4 get map_alias{			/customcolor_tint AGMCORE_gget exch setsepcolorspace			pop			mapto_sep_imageormask		}{			AGMIMG_&customcolorimage		}ifelse				}bdf}deflevel2 not{	/colorbuf	{		0 1 2 index length 1 sub{			dup 2 index exch get 			255 exch sub 			2 index 			3 1 roll 			put		}for	}def	/tint_image_to_color	{		begin			Width Height BitsPerComponent ImageMatrix 			/DataSource load		end		Adobe_AGM_Image begin			/AGMIMG_mbuf 0 string def			/AGMIMG_ybuf 0 string def			/AGMIMG_kbuf 0 string def			{				colorbuf dup length AGMIMG_mbuf length ne					{					dup length dup dup					/AGMIMG_mbuf exch string def					/AGMIMG_ybuf exch string def					/AGMIMG_kbuf exch string def					} if				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop			}			addprocs			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf} true 4 colorimage			end	} def				/sep_imageormask_lev1	{		begin			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{					255 mul round cvi GrayLookup exch get				} currenttransfer addprocs settransfer				currentdict imageormask			}{				/sep_colorspace_dict AGMCORE_gget/Components known{					MappedCSA 0 get /DeviceCMYK eq{						Components aload pop					}{						0 0 0 Components aload pop 1 exch sub					}ifelse										Adobe_AGM_Image/AGMIMG_k xddf 					Adobe_AGM_Image/AGMIMG_y xddf 					Adobe_AGM_Image/AGMIMG_m xddf 					Adobe_AGM_Image/AGMIMG_c xddf 											AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{						{AGMIMG_k mul 1 exch sub} currenttransfer addprocs settransfer						currentdict imageormask					}{ 												currentcolortransfer						{AGMIMG_k mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_y mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_m mul 1 exch sub} exch addprocs 4 1 roll						{AGMIMG_c mul 1 exch sub} exch addprocs 4 1 roll						setcolortransfer						currentdict tint_image_to_color					}ifelse				}{										MappedCSA 0 get /DeviceGray eq {						{255 mul round cvi ColorLookup exch get 0 get} currenttransfer addprocs settransfer						currentdict imageormask					}{						MappedCSA 0 get /DeviceCMYK eq {							currentcolortransfer							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}{ 							currentcolortransfer							{pop 1} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 2 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 1 get} exch addprocs 4 1 roll							{255 mul round cvi ColorLookup exch get 0 get} exch addprocs 4 1 roll							setcolortransfer 							currentdict tint_image_to_color						}ifelse					}ifelse				}ifelse			}ifelse		end	}def	/sep_image_lev1_sep	{		begin			/sep_colorspace_dict AGMCORE_gget/Components known{				Components aload pop								Adobe_AGM_Image/AGMIMG_k xddf 				Adobe_AGM_Image/AGMIMG_y xddf 				Adobe_AGM_Image/AGMIMG_m xddf 				Adobe_AGM_Image/AGMIMG_c xddf 									{AGMIMG_c mul 1 exch sub}				{AGMIMG_m mul 1 exch sub}				{AGMIMG_y mul 1 exch sub}				{AGMIMG_k mul 1 exch sub}			}{ 				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}			}ifelse						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end	}def	/indexed_imageormask_lev1	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			currentdict			MappedCSA 0 get dup /DeviceRGB eq exch /DeviceCMYK eq or has_color not and{								{HiVal mul round cvi GrayLookup exch get HiVal div} currenttransfer addprocs settransfer				imageormask			}{								MappedCSA 0 get /DeviceGray eq {					{HiVal mul round cvi Lookup exch get HiVal div} currenttransfer addprocs settransfer					imageormask				}{					MappedCSA 0 get /DeviceCMYK eq {						currentcolortransfer						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}{ 						currentcolortransfer						{pop 1} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div} exch addprocs 4 1 roll						{3 mul HiVal mul round cvi 	   Lookup exch get HiVal div} exch addprocs 4 1 roll						setcolortransfer 						tint_image_to_color					}ifelse				}ifelse			}ifelse		end end	}def	/indexed_image_lev1_sep	{		/indexed_colorspace_dict AGMCORE_gget begin		begin			{4 mul HiVal mul round cvi       Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}						AGMCORE_get_ink_data currenttransfer addprocs settransfer						currentdict imageormask_sys						end end	}def}ifendsystemdict /setpacking known{	setpacking} if%%EndResource%ADOBeginClientInjection: DocumentProlog End "AI10"%ADOEndClientInjection: DocumentProlog End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndProlog%%BeginSetup%ADOBeginClientInjection: DocumentSetup Start "AI10"%ADOEndClientInjection: DocumentSetup Start "AI10"Adobe_AGM_Utils begin2 2010 true Adobe_AGM_Core/doc_setup get execAdobe_CoolType_Core/doc_setup get execAdobe_AGM_Image/doc_setup get exec%ADOBeginClientInjection: DocumentSetup End "AI10"%ADOEndClientInjection: DocumentSetup End "AI10"currentdict Adobe_AGM_Utils eq {end} if%%EndSetup%%Page: roughtxt3.eps 1%%EndPageComments%%BeginPageSetup%ADOBeginClientInjection: PageSetup Start "AI10"%ADOEndClientInjection: PageSetup Start "AI10"Adobe_AGM_Utils beginAdobe_AGM_Core/page_setup get execAdobe_CoolType_Core/page_setup get execAdobe_AGM_Image/page_setup get exec%ADOBeginClientInjection: PageSetup End "AI10"%ADOEndClientInjection: PageSetup End "AI10"%%EndPageSetupAdobe_AGM_Core/AGMCORE_save save ddf1 -1 scale 0 -107.813 translate[1 0 0 1 0 0 ]  concatmark/0 [/DeviceGray] add_csa/CSA /0 /1 [/DeviceCMYK] add_csa/CSA /1 /2 [/DeviceRGB] add_csa/CSA /2 cleartomark800 path_rez% page clipgsavenewpathgsave % PSGState0 0 mo0 107.813 li238 107.813 li238 0 liclp[1 0 0 1 0 0 ] concat%ADOBeginClientInjection: BeginPageContent "AI10"%ADOEndClientInjection: BeginPageContent "AI10"gsave % PSGState0 0 mo238 0 li238 108 li0 108 li0 0 liclp3.91163 8.46192 mo14.1343 8.46192 li18.3101 8.46192 22.0176 8.46192 24.2491 11.6661 cv25.2212 13.1055 25.689 15.1573 25.689 16.8848 cv25.689 18.2891 25.4009 19.6568 24.8252 20.8448 cv22.6294 25.3799 17.9498 25.4883 14.4947 25.5601 cv10.2828 25.5601 li10.2828 33.875 li3.91163 33.875 li3.91163 8.46192 lifalse sop0 0 0 1 cmykf10.2828 13.1417 mo10.2828 20.8448 li14.0987 20.8448 li16.4742 20.8448 19.3541 20.7725 19.3541 16.8492 cv19.3541 13.1417 16.1504 13.1417 14.3145 13.1417 cv10.2828 13.1417 li0 0 0 0 cmykf35.0147 8.46192 mo35.0147 33.875 li28.6792 33.875 li28.6792 8.46192 li35.0147 8.46192 li0 0 0 1 cmykf52.4371 34.5948 mo44.3741 34.5948 39.8028 28.4039 39.8028 21.0606 cv39.8028 14.1856 44.1583 7.67042 52.3292 7.67042 cv53.8414 7.67042 55.4249 7.88624 56.9727 8.42627 cv64.7476 11.126 65.2515 19.585 65.2515 21.3126 cv65.2515 25.7042 63.2359 29.6636 60.4283 31.9312 cv57.9444 33.983 55.065 34.5948 52.4371 34.5948 cv0 0 0 1 cmykf56.8287 14.8335 mo55.7491 13.6817 54.0928 12.962 52.3653 12.962 cv48.5137 12.962 46.066 16.3453 46.066 20.9527 cv46.066 27 49.4498 29.2315 52.4371 29.2315 cv55.461 29.2315 58.7007 27.0718 58.8804 21.7447 cv58.9883 19.0811 58.2686 16.3814 56.8287 14.8335 cv0 0 0 0 cmykf69.2144 8.46192 mo75.4415 8.46192 li80.9493 17.8213 li82.9649 21.3848 83.5767 22.5362 84.7647 24.7681 cv84.4766 8.46192 li90.5596 8.46192 li90.5596 33.875 li84.3326 33.875 li79.5811 25.8482 li77.2774 22.0684 76.8458 21.2764 75.1177 17.8931 cv75.2979 33.875 li69.2144 33.875 li69.2144 8.46192 li0 0 0 1 cmykf96.9976 8.46192 mo115.788 8.46192 li115.788 13.3936 li103.333 13.3936 li103.333 18.001 li114.959 18.001 li114.959 22.8243 li103.333 22.8243 li103.333 28.8716 li116.903 28.8716 li116.903 33.875 li96.9976 33.875 li96.9976 8.46192 li0 0 0 1 cmykf121.766 8.46192 mo140.555 8.46192 li140.555 13.3936 li128.101 13.3936 li128.101 18.001 li139.727 18.001 li139.727 22.8243 li128.101 22.8243 li128.101 28.8716 li141.671 28.8716 li141.671 33.875 li121.766 33.875 li121.766 8.46192 li0 0 0 1 cmykf146.497 8.46192 mo157.944 8.46192 li160.607 8.49805 163.919 8.53418 166.259 11.0538 cv167.446 12.3858 168.274 14.4014 168.274 16.7051 cv168.274 21.8165 164.783 23.0762 163.055 23.7247 cv168.922 33.875 li161.903 33.875 li156.864 24.8042 li152.868 24.8042 li152.868 33.875 li146.497 33.875 li146.497 8.46192 li0 0 0 1 cmykf152.868 13.2139 mo152.868 20.0889 li158.124 20.0889 li159.023 20.0528 161.939 19.9805 161.939 16.5972 cv161.939 13.3575 159.6 13.2496 158.268 13.2139 cv152.868 13.2139 li0 0 0 0 cmykf179.824 8.46192 mo179.824 33.875 li173.488 33.875 li173.488 8.46192 li179.824 8.46192 li0 0 0 1 cmykf186.268 8.46192 mo192.495 8.46192 li198.002 17.8213 li200.018 21.3848 200.63 22.5362 201.818 24.7681 cv201.53 8.46192 li207.613 8.46192 li207.613 33.875 li201.386 33.875 li196.634 25.8482 li194.331 22.0684 193.899 21.2764 192.171 17.8931 cv192.351 33.875 li186.268 33.875 li186.268 8.46192 li0 0 0 1 cmykf231.221 31.4991 mo230.177 32.4712 228.017 34.4512 223.733 34.4512 cv216.643 34.4512 212.287 28.6915 212.287 21.2046 cv212.287 13.0337 217.578 7.59864 224.813 7.59864 cv231.544 7.59864 234.82 11.918 236.008 13.4659 cv231.185 16.3814 li230.285 15.0137 228.809 12.7818 225.281 12.7818 cv220.458 12.7818 218.622 16.7774 218.622 21.0245 cv218.622 23.9043 219.414 26.2442 220.638 27.504 cv221.61 28.5479 223.337 29.3399 225.281 29.3399 cv226.433 29.3399 227.729 29.0518 228.773 28.3677 cv230.429 27.2881 230.645 25.92 230.825 24.5879 cv225.137 24.5879 li225.137 19.7647 li236.188 19.7647 li236.188 33.875 li231.221 33.875 li231.221 31.4991 li0 0 0 1 cmykf11.0962 48.9952 mo11.0962 76.875 li4.146 76.875 li4.146 48.9952 li11.0962 48.9952 li0 0 0 0.75 cmykf18.1675 48.9952 mo30.7251 48.9952 li33.6475 49.0347 37.2808 49.0743 39.8472 51.8384 cv41.1504 53.2999 42.0586 55.5113 42.0586 58.0386 cv42.0586 63.646 38.2286 65.0284 36.3331 65.7388 cv42.7696 76.875 li35.0694 76.875 li29.5406 66.9239 li25.1573 66.9239 li25.1573 76.875 li18.1675 76.875 li18.1675 48.9952 li0 0 0 0.75 cmykf25.1573 54.2081 mo25.1573 61.7505 li30.9229 61.7505 li31.9102 61.711 35.1084 61.6319 35.1084 57.92 cv35.1084 54.3658 32.542 54.2476 31.0806 54.2081 cv25.1573 54.2081 li0 0 0 0 cmykf47.7828 48.9952 mo60.3409 48.9952 li63.2627 49.0347 66.896 49.0743 69.4629 51.8384 cv70.7662 53.2999 71.6744 55.5113 71.6744 58.0386 cv71.6744 63.646 67.8438 65.0284 65.9483 65.7388 cv72.3848 76.875 li64.6846 76.875 li59.1558 66.9239 li54.7725 66.9239 li54.7725 76.875 li47.7828 76.875 li47.7828 48.9952 li0 0 0 0.75 cmykf54.7725 54.2081 mo54.7725 61.7505 li60.5381 61.7505 li61.5254 61.711 64.7242 61.6319 64.7242 57.92 cv64.7242 54.3658 62.1573 54.2476 60.6958 54.2081 cv54.7725 54.2081 li0 0 0 0 cmykf84.3487 48.9952 mo84.3487 76.875 li77.3985 76.875 li77.3985 48.9952 li84.3487 48.9952 li0 0 0 0.75 cmykf110.296 74.2686 mo109.151 75.335 106.782 77.5069 102.083 77.5069 cv94.3028 77.5069 89.5245 71.1885 89.5245 62.9747 cv89.5245 54.0103 95.3296 48.0474 103.267 48.0474 cv110.652 48.0474 114.246 52.7862 115.549 54.4844 cv110.257 57.6832 li109.27 56.1827 107.651 53.7339 103.781 53.7339 cv98.4888 53.7339 96.4747 58.1172 96.4747 62.7774 cv96.4747 65.9366 97.3433 68.503 98.6861 69.8853 cv99.7525 71.0303 101.648 71.8995 103.781 71.8995 cv105.044 71.8995 106.466 71.5835 107.611 70.8331 cv109.428 69.6485 109.665 68.148 109.862 66.6866 cv103.623 66.6866 li103.623 61.3951 li115.746 61.3951 li115.746 76.875 li110.296 76.875 li110.296 74.2686 li0 0 0 0.75 cmykf135.143 48.9952 mo145.411 76.875 li137.986 76.875 li136.604 72.4126 li126.337 72.4126 li124.955 76.875 li117.531 76.875 li127.877 48.9952 li135.143 48.9952 li0 0 0 0.75 cmykf131.392 55.6294 mo131.036 57.0513 130.642 58.5123 130.247 59.9341 cv129.654 62.0269 128.588 65.3047 127.956 67.3975 cv135.025 67.3975 li131.392 55.6294 li0 0 0 0 cmykf142.573 48.9561 mo164.055 48.9561 li164.055 54.4844 li156.829 54.4844 li156.829 76.875 li149.839 76.875 li149.839 54.4844 li142.573 54.4844 li142.573 48.9561 li0 0 0 0.75 cmykf174.082 48.9952 mo174.082 76.875 li167.132 76.875 li167.132 48.9952 li174.082 48.9952 li0 0 0 0.75 cmykf193.198 77.6651 mo184.353 77.6651 179.337 70.8726 179.337 62.8169 cv179.337 55.274 184.115 48.1265 193.08 48.1265 cv194.738 48.1265 196.476 48.3633 198.174 48.9561 cv206.704 51.9175 207.256 61.1978 207.256 63.0933 cv207.256 67.9107 205.045 72.2549 201.965 74.7427 cv199.24 76.9937 196.081 77.6651 193.198 77.6651 cv0 0 0 0.75 cmykf198.016 55.9849 mo196.831 54.7212 195.015 53.9317 193.119 53.9317 cv188.894 53.9317 186.208 57.6436 186.208 62.6983 cv186.208 69.3326 189.92 71.7808 193.198 71.7808 cv196.515 71.7808 200.069 69.4112 200.267 63.5669 cv200.385 60.6446 199.595 57.6832 198.016 55.9849 cv0 0 0 0 cmykf211.608 48.9952 mo218.44 48.9952 li224.482 59.2627 li226.693 63.1719 227.365 64.4356 228.668 66.8843 cv228.352 48.9952 li235.025 48.9952 li235.025 76.875 li228.194 76.875 li222.981 68.0689 li220.454 63.9224 219.98 63.0538 218.084 59.3418 cv218.282 76.875 li211.608 76.875 li211.608 48.9952 li0 0 0 0.75 cmykf4.11573 98.5792 mo4.11573 95.6919 4.11573 95.1597 4.07764 94.5518 cv4.03956 93.9063 3.84961 93.5831 3.43165 93.4883 cv3.22266 93.4312 2.97559 93.4122 2.74756 93.4122 cv2.55762 93.4122 2.44385 93.3741 2.44385 93.2222 cv2.44385 93.108 2.59571 93.0704 2.89991 93.0704 cv3.62159 93.0704 4.81836 93.127 5.36963 93.127 cv5.84424 93.127 6.96534 93.0704 7.68702 93.0704 cv7.93409 93.0704 8.08594 93.108 8.08594 93.2222 cv8.08594 93.3741 7.97217 93.4122 7.78223 93.4122 cv7.5918 93.4122 7.43995 93.4312 7.21192 93.4693 cv6.69922 93.564 6.54737 93.8873 6.50928 94.5518 cv6.4712 95.1597 6.4712 95.6919 6.4712 98.5792 cv6.4712 101.923 li6.4712 103.766 6.4712 105.267 6.54737 106.084 cv6.60401 106.597 6.73731 106.938 7.30713 107.015 cv7.57325 107.053 7.99122 107.09 8.27588 107.09 cv8.48487 107.09 8.58008 107.147 8.58008 107.243 cv8.58008 107.376 8.42774 107.433 8.21876 107.433 cv6.96534 107.433 5.76807 107.376 5.25538 107.376 cv4.81836 107.376 3.62159 107.433 2.86182 107.433 cv2.61475 107.433 2.48194 107.376 2.48194 107.243 cv2.48194 107.147 2.55762 107.09 2.78565 107.09 cv3.07081 107.09 3.29883 107.053 3.46973 107.015 cv3.84961 106.938 3.96338 106.616 4.02051 106.065 cv4.11573 105.267 4.11573 103.766 4.11573 101.923 cv4.11573 98.5792 li0 0 0 1 cmykf13.7657 104.849 mo13.8038 106.331 14.0503 106.825 14.4307 106.958 cv14.7535 107.071 15.1143 107.09 15.4185 107.09 cv15.6275 107.09 15.7413 107.128 15.7413 107.243 cv15.7413 107.395 15.5704 107.433 15.3042 107.433 cv14.0694 107.433 13.3096 107.376 12.9488 107.376 cv12.7779 107.376 11.8848 107.433 10.897 107.433 cv10.65 107.433 10.4791 107.414 10.4791 107.243 cv10.4791 107.128 10.5928 107.09 10.7833 107.09 cv11.0298 107.09 11.3721 107.071 11.6377 106.996 cv12.1319 106.844 12.2081 106.292 12.2266 104.64 cv12.398 93.3931 li12.398 93.0132 12.4546 92.7471 12.6446 92.7471 cv12.8536 92.7471 13.025 92.9942 13.3477 93.336 cv13.5757 93.5831 16.4634 96.6797 19.2369 99.4341 cv20.5289 100.727 23.0933 103.462 23.4161 103.766 cv23.5113 103.766 li23.3213 95.2359 li23.3023 94.0772 23.1314 93.7159 22.6753 93.5264 cv22.3902 93.4122 21.9346 93.4122 21.6685 93.4122 cv21.4405 93.4122 21.3643 93.355 21.3643 93.2413 cv21.3643 93.0889 21.5733 93.0704 21.8584 93.0704 cv22.8462 93.0704 23.7584 93.127 24.1573 93.127 cv24.3663 93.127 25.0879 93.0704 26.0186 93.0704 cv26.2657 93.0704 26.4556 93.0889 26.4556 93.2413 cv26.4556 93.355 26.3418 93.4122 26.1138 93.4122 cv25.9239 93.4122 25.772 93.4122 25.544 93.4693 cv25.0118 93.6211 24.8599 94.0201 24.8409 95.084 cv24.6319 107.071 li24.6319 107.49 24.5562 107.661 24.3848 107.661 cv24.1758 107.661 23.9483 107.452 23.7393 107.243 cv22.5425 106.103 20.1109 103.614 18.1348 101.657 cv16.064 99.6055 13.9556 97.2305 13.6138 96.8697 cv13.5567 96.8697 li13.7657 104.849 li0 0 0 1 cmykf37.1465 102.474 mo37.0518 102.474 37.0137 102.512 36.9756 102.626 cv35.9498 105.343 li35.7598 105.818 35.6651 106.274 35.6651 106.501 cv35.6651 106.844 35.836 107.09 36.4249 107.09 cv36.7095 107.09 li36.9376 107.09 36.9947 107.128 36.9947 107.243 cv36.9947 107.395 36.8809 107.433 36.6719 107.433 cv36.064 107.433 35.2471 107.376 34.6583 107.376 cv34.4493 107.376 33.4043 107.433 32.4166 107.433 cv32.1695 107.433 32.0552 107.395 32.0552 107.243 cv32.0552 107.128 32.1314 107.09 32.2833 107.09 cv32.4546 107.09 32.7203 107.071 32.8721 107.053 cv33.7461 106.938 34.107 106.292 34.4874 105.343 cv39.2554 93.4122 li39.4834 92.8614 39.5972 92.6524 39.7872 92.6524 cv39.9581 92.6524 40.0723 92.8233 40.2623 93.2603 cv40.7183 94.3047 43.7579 102.056 44.9737 104.944 cv45.6954 106.654 46.2461 106.919 46.6456 107.015 cv46.9302 107.071 47.2154 107.09 47.4429 107.09 cv47.5953 107.09 47.69 107.109 47.69 107.243 cv47.69 107.395 47.5191 107.433 46.8165 107.433 cv46.1324 107.433 44.7457 107.433 43.2256 107.395 cv42.8838 107.376 42.6558 107.376 42.6558 107.243 cv42.6558 107.128 42.732 107.09 42.9219 107.071 cv43.0547 107.034 43.188 106.863 43.0928 106.635 cv41.5733 102.607 li41.5352 102.512 41.4781 102.474 41.3829 102.474 cv37.1465 102.474 li0 0 0 1 cmykf41.022 101.524 mo41.1172 101.524 41.1363 101.467 41.1172 101.411 cv39.4073 96.7178 li39.3882 96.6416 39.3692 96.5464 39.3126 96.5464 cv39.2554 96.5464 39.2173 96.6416 39.1983 96.7178 cv37.4507 101.392 li37.4317 101.467 37.4507 101.524 37.5264 101.524 cv41.022 101.524 li0 0 0 0 cmykf48.7764 98.5792 mo48.7764 95.6919 48.7764 95.1597 48.7383 94.5518 cv48.7002 93.9063 48.5484 93.6021 47.9214 93.4693 cv47.7696 93.4312 47.4463 93.4122 47.1802 93.4122 cv46.9717 93.4122 46.8575 93.3741 46.8575 93.2413 cv46.8575 93.108 46.9908 93.0704 47.2754 93.0704 cv48.2823 93.0704 49.4791 93.127 50.0489 93.127 cv50.5049 93.127 51.7017 93.0704 52.3858 93.0704 cv52.6705 93.0704 52.8038 93.108 52.8038 93.2413 cv52.8038 93.3741 52.6895 93.4122 52.4996 93.4122 cv52.2906 93.4122 52.1768 93.4312 51.9488 93.4693 cv51.4361 93.564 51.2837 93.8873 51.2457 94.5518 cv51.2081 95.1597 51.2081 95.6919 51.2081 98.5792 cv51.2081 101.239 li51.2081 103.994 51.7588 105.153 52.6895 105.913 cv53.5445 106.616 54.4185 106.691 55.0645 106.691 cv55.9 106.691 56.9258 106.426 57.6861 105.666 cv58.7305 104.621 58.7876 102.911 58.7876 100.955 cv58.7876 98.5792 li58.7876 95.6919 58.7876 95.1597 58.7496 94.5518 cv58.712 93.9063 58.5596 93.6021 57.9327 93.4693 cv57.7808 93.4312 57.4581 93.4122 57.2491 93.4122 cv57.0401 93.4122 56.9258 93.3741 56.9258 93.2413 cv56.9258 93.108 57.0591 93.0704 57.3248 93.0704 cv58.294 93.0704 59.4908 93.127 59.5098 93.127 cv59.7378 93.127 60.9346 93.0704 61.6753 93.0704 cv61.9415 93.0704 62.0743 93.108 62.0743 93.2413 cv62.0743 93.3741 61.96 93.4122 61.7325 93.4122 cv61.5235 93.4122 61.4092 93.4312 61.1817 93.4693 cv60.6685 93.564 60.5166 93.8873 60.4786 94.5518 cv60.4405 95.1597 60.4405 95.6919 60.4405 98.5792 cv60.4405 100.612 li60.4405 102.721 60.2315 104.963 58.6358 106.331 cv57.2872 107.49 55.919 107.699 54.6841 107.699 cv53.6778 107.699 51.8536 107.642 50.4668 106.388 cv49.4981 105.514 48.7764 104.108 48.7764 101.354 cv48.7764 98.5792 li0 0 0 1 cmykf64.7325 107.205 mo64.4288 107.071 64.3716 106.977 64.3716 106.559 cv64.3716 105.514 64.4478 104.374 64.4668 104.07 cv64.4854 103.785 64.5425 103.576 64.6949 103.576 cv64.8658 103.576 64.8843 103.747 64.8843 103.899 cv64.8843 104.146 64.9605 104.545 65.0557 104.868 cv65.4737 106.274 66.5943 106.787 67.772 106.787 cv69.482 106.787 70.3179 105.628 70.3179 104.621 cv70.3179 103.69 70.0328 102.797 68.4561 101.582 cv67.5821 100.897 li65.4922 99.2632 64.7706 97.9336 64.7706 96.3946 cv64.7706 94.3047 66.5181 92.8042 69.1587 92.8042 cv70.3936 92.8042 71.1915 92.9942 71.6856 93.127 cv71.8565 93.1651 71.9517 93.2222 71.9517 93.355 cv71.9517 93.6021 71.8755 94.1529 71.8755 95.6348 cv71.8755 96.0528 71.8184 96.2046 71.6666 96.2046 cv71.5337 96.2046 71.4766 96.0909 71.4766 95.8628 cv71.4766 95.6919 71.3819 95.1026 70.9825 94.6089 cv70.6978 94.2481 70.147 93.6778 68.9122 93.6778 cv67.5059 93.6778 66.6514 94.4952 66.6514 95.6348 cv66.6514 96.5088 67.0884 97.1734 68.6651 98.3702 cv69.1968 98.7696 li71.4766 100.537 72.3126 101.809 72.3126 103.614 cv72.3126 104.716 71.8946 106.027 70.5269 106.919 cv69.5767 107.527 68.5132 107.699 67.5059 107.699 cv66.4044 107.699 65.5494 107.565 64.7325 107.205 cv0 0 0 1 cmykf79.358 94.1338 mo76.5274 94.21 li75.4258 94.2481 74.9698 94.3428 74.6846 94.7608 cv74.4947 95.046 74.4 95.274 74.3619 95.4258 cv74.3238 95.5777 74.2666 95.6539 74.1529 95.6539 cv74.0201 95.6539 73.982 95.5586 73.982 95.3497 cv73.982 95.046 74.3428 93.3169 74.3809 93.1651 cv74.4376 92.918 74.4947 92.8042 74.6089 92.8042 cv74.7608 92.8042 74.9507 92.9942 75.4258 93.0323 cv75.9766 93.0889 76.6983 93.127 77.3252 93.127 cv84.8482 93.127 li86.064 93.127 86.5201 92.9371 86.6719 92.9371 cv86.8047 92.9371 86.8238 93.0513 86.8238 93.336 cv86.8238 93.7349 86.7671 95.046 86.7671 95.5401 cv86.7481 95.7295 86.71 95.8438 86.5958 95.8438 cv86.4439 95.8438 86.4058 95.7486 86.3868 95.4639 cv86.3677 95.2549 li86.3301 94.7608 85.8169 94.2291 84.1265 94.191 cv81.7325 94.1338 li81.7325 101.923 li81.7325 103.671 81.7325 105.172 81.8277 105.989 cv81.8848 106.521 81.9986 106.938 82.5684 107.015 cv82.8345 107.053 83.2525 107.09 83.5376 107.09 cv83.7461 107.09 83.8414 107.147 83.8414 107.243 cv83.8414 107.376 83.6895 107.433 83.4805 107.433 cv82.2266 107.433 81.0298 107.376 80.4981 107.376 cv80.0611 107.376 78.8643 107.433 78.1041 107.433 cv77.8575 107.433 77.7242 107.376 77.7242 107.243 cv77.7242 107.147 77.8003 107.09 78.0284 107.09 cv78.313 107.09 78.5411 107.053 78.712 107.015 cv79.0918 106.938 79.2061 106.521 79.2632 105.97 cv79.358 105.172 79.358 103.671 79.358 101.923 cv79.358 94.1338 li0 0 0 1 cmykf90.3208 98.5792 mo90.3208 95.6919 90.3208 95.1597 90.2828 94.5518 cv90.2447 93.9063 90.0928 93.6021 89.4659 93.4693 cv89.314 93.4312 88.9908 93.4122 88.7247 93.4122 cv88.5162 93.4122 88.4019 93.3741 88.4019 93.2413 cv88.4019 93.108 88.5347 93.0704 88.8199 93.0704 cv89.8267 93.0704 91.0235 93.127 91.4224 93.127 cv92.0684 93.127 93.5123 93.0704 94.1011 93.0704 cv95.2979 93.0704 96.5708 93.1841 97.5967 93.8873 cv98.1285 94.2481 98.8882 95.2168 98.8882 96.4898 cv98.8882 97.8956 98.2994 99.1871 96.3809 100.746 cv98.0713 102.873 99.3824 104.564 100.503 105.742 cv101.567 106.844 102.346 106.977 102.631 107.034 cv102.84 107.071 103.011 107.09 103.163 107.09 cv103.315 107.09 103.391 107.147 103.391 107.243 cv103.391 107.395 103.258 107.433 103.03 107.433 cv101.226 107.433 li100.162 107.433 99.6861 107.337 99.1924 107.071 cv98.3755 106.635 97.6534 105.742 96.5899 104.279 cv95.8296 103.234 94.9561 101.942 94.709 101.657 cv94.6138 101.543 94.5 101.524 94.3672 101.524 cv92.7144 101.486 li92.6192 101.486 92.5626 101.524 92.5626 101.638 cv92.5626 101.904 li92.5626 103.671 92.5626 105.172 92.6573 105.97 cv92.7144 106.521 92.8282 106.938 93.3985 107.015 cv93.6832 107.053 94.1011 107.09 94.3292 107.09 cv94.481 107.09 94.5572 107.147 94.5572 107.243 cv94.5572 107.376 94.4239 107.433 94.1768 107.433 cv93.0752 107.433 91.6695 107.376 91.3843 107.376 cv91.0235 107.376 89.8267 107.433 89.0669 107.433 cv88.8199 107.433 88.6871 107.376 88.6871 107.243 cv88.6871 107.147 88.7627 107.09 88.9908 107.09 cv89.2759 107.09 89.504 107.053 89.6749 107.015 cv90.0547 106.938 90.1495 106.521 90.2256 105.97 cv90.3208 105.172 90.3208 103.671 90.3208 101.923 cv90.3208 98.5792 li0 0 0 1 cmykf92.5626 100.081 mo92.5626 100.29 92.6002 100.366 92.7334 100.422 cv93.1324 100.556 93.7022 100.612 94.1768 100.612 cv94.9371 100.612 95.1841 100.537 95.5259 100.29 cv96.0958 99.8711 96.6465 98.9971 96.6465 97.4395 cv96.6465 94.7418 94.8609 93.9629 93.7403 93.9629 cv93.2652 93.9629 92.9234 93.982 92.7334 94.0391 cv92.6002 94.0772 92.5626 94.1529 92.5626 94.3047 cv92.5626 100.081 li0 0 0 0 cmykf105.424 102.474 mo105.329 102.474 105.291 102.512 105.253 102.626 cv104.227 105.343 li104.037 105.818 103.942 106.274 103.942 106.501 cv103.942 106.844 104.113 107.09 104.702 107.09 cv104.987 107.09 li105.215 107.09 105.272 107.128 105.272 107.243 cv105.272 107.395 105.158 107.433 104.949 107.433 cv104.341 107.433 103.524 107.376 102.935 107.376 cv102.726 107.376 101.681 107.433 100.693 107.433 cv100.446 107.433 100.333 107.395 100.333 107.243 cv100.333 107.128 100.409 107.09 100.561 107.09 cv100.731 107.09 100.998 107.071 101.149 107.053 cv102.023 106.938 102.384 106.292 102.764 105.343 cv107.533 93.4122 li107.76 92.8614 107.875 92.6524 108.064 92.6524 cv108.235 92.6524 108.349 92.8233 108.539 93.2603 cv108.995 94.3047 112.035 102.056 113.25 104.944 cv113.973 106.654 114.523 106.919 114.922 107.015 cv115.208 107.071 115.492 107.09 115.72 107.09 cv115.872 107.09 115.967 107.109 115.967 107.243 cv115.967 107.395 115.796 107.433 115.093 107.433 cv114.409 107.433 113.022 107.433 111.503 107.395 cv111.161 107.376 110.933 107.376 110.933 107.243 cv110.933 107.128 111.009 107.09 111.199 107.071 cv111.332 107.034 111.465 106.863 111.37 106.635 cv109.85 102.607 li109.812 102.512 109.755 102.474 109.66 102.474 cv105.424 102.474 li0 0 0 1 cmykf109.299 101.524 mo109.394 101.524 109.413 101.467 109.394 101.411 cv107.685 96.7178 li107.666 96.6416 107.646 96.5464 107.589 96.5464 cv107.533 96.5464 107.495 96.6416 107.476 96.7178 cv105.728 101.392 li105.709 101.467 105.728 101.524 105.804 101.524 cv109.299 101.524 li0 0 0 0 cmykf120.337 101.923 mo120.337 104.355 120.337 105.666 120.736 106.008 cv121.06 106.292 121.553 106.426 123.035 106.426 cv124.042 106.426 124.783 106.407 125.258 105.894 cv125.486 105.647 125.714 105.115 125.752 104.754 cv125.771 104.583 125.809 104.469 125.961 104.469 cv126.094 104.469 126.113 104.564 126.113 104.792 cv126.113 105.001 125.98 106.426 125.828 106.977 cv125.714 107.395 125.619 107.49 124.631 107.49 cv121.896 107.49 120.642 107.376 119.103 107.376 cv118.666 107.376 117.469 107.433 116.709 107.433 cv116.462 107.433 116.329 107.376 116.329 107.243 cv116.329 107.147 116.405 107.09 116.633 107.09 cv116.918 107.09 117.146 107.053 117.317 107.015 cv117.697 106.938 117.792 106.521 117.868 105.97 cv117.963 105.172 117.963 103.671 117.963 101.923 cv117.963 98.5792 li117.963 95.6919 117.963 95.1597 117.925 94.5518 cv117.887 93.9063 117.735 93.6021 117.108 93.4693 cv116.956 93.4312 116.728 93.4122 116.481 93.4122 cv116.272 93.4122 116.158 93.3741 116.158 93.2413 cv116.158 93.108 116.291 93.0704 116.576 93.0704 cv117.469 93.0704 118.666 93.127 119.179 93.127 cv119.635 93.127 121.022 93.0704 121.762 93.0704 cv122.028 93.0704 122.161 93.108 122.161 93.2413 cv122.161 93.3741 122.047 93.4122 121.819 93.4122 cv121.61 93.4122 121.307 93.4312 121.079 93.4693 cv120.565 93.564 120.414 93.8873 120.376 94.5518 cv120.337 95.1597 120.337 95.6919 120.337 98.5792 cv120.337 101.923 li0 0 0 1 cmykf129.458 98.5792 mo129.458 95.6919 129.458 95.1597 129.419 94.5518 cv129.381 93.9063 129.191 93.5831 128.774 93.4883 cv128.564 93.4312 128.318 93.4122 128.09 93.4122 cv127.9 93.4122 127.786 93.3741 127.786 93.2222 cv127.786 93.108 127.938 93.0704 128.242 93.0704 cv128.964 93.0704 130.161 93.127 130.711 93.127 cv131.187 93.127 132.307 93.0704 133.029 93.0704 cv133.276 93.0704 133.428 93.108 133.428 93.2222 cv133.428 93.3741 133.314 93.4122 133.124 93.4122 cv132.934 93.4122 132.782 93.4312 132.554 93.4693 cv132.041 93.564 131.889 93.8873 131.851 94.5518 cv131.813 95.1597 131.813 95.6919 131.813 98.5792 cv131.813 101.923 li131.813 103.766 131.813 105.267 131.889 106.084 cv131.946 106.597 132.079 106.938 132.649 107.015 cv132.915 107.053 133.333 107.09 133.618 107.09 cv133.827 107.09 133.922 107.147 133.922 107.243 cv133.922 107.376 133.77 107.433 133.561 107.433 cv132.307 107.433 131.11 107.376 130.597 107.376 cv130.161 107.376 128.964 107.433 128.204 107.433 cv127.957 107.433 127.824 107.376 127.824 107.243 cv127.824 107.147 127.9 107.09 128.128 107.09 cv128.413 107.09 128.641 107.053 128.812 107.015 cv129.191 106.938 129.306 106.616 129.363 106.065 cv129.458 105.267 129.458 103.766 129.458 101.923 cv129.458 98.5792 li0 0 0 1 cmykf138.804 102.474 mo138.708 102.474 138.671 102.512 138.633 102.626 cv137.607 105.343 li137.417 105.818 137.322 106.274 137.322 106.501 cv137.322 106.844 137.493 107.09 138.082 107.09 cv138.367 107.09 li138.595 107.09 138.652 107.128 138.652 107.243 cv138.652 107.395 138.538 107.433 138.329 107.433 cv137.721 107.433 136.904 107.376 136.315 107.376 cv136.106 107.376 135.061 107.433 134.073 107.433 cv133.826 107.433 133.712 107.395 133.712 107.243 cv133.712 107.128 133.789 107.09 133.94 107.09 cv134.111 107.09 134.377 107.071 134.529 107.053 cv135.403 106.938 135.764 106.292 136.144 105.343 cv140.912 93.4122 li141.14 92.8614 141.254 92.6524 141.444 92.6524 cv141.615 92.6524 141.729 92.8233 141.919 93.2603 cv142.375 94.3047 145.415 102.056 146.63 104.944 cv147.353 106.654 147.903 106.919 148.302 107.015 cv148.587 107.071 148.872 107.09 149.1 107.09 cv149.252 107.09 149.347 107.109 149.347 107.243 cv149.347 107.395 149.176 107.433 148.473 107.433 cv147.789 107.433 146.402 107.433 144.883 107.395 cv144.541 107.376 144.313 107.376 144.313 107.243 cv144.313 107.128 144.389 107.09 144.579 107.071 cv144.712 107.034 144.845 106.863 144.75 106.635 cv143.23 102.607 li143.192 102.512 143.135 102.474 143.04 102.474 cv138.804 102.474 li0 0 0 1 cmykf142.679 101.524 mo142.774 101.524 142.793 101.467 142.774 101.411 cv141.064 96.7178 li141.045 96.6416 141.026 96.5464 140.969 96.5464 cv140.912 96.5464 140.875 96.6416 140.855 96.7178 cv139.107 101.392 li139.088 101.467 139.107 101.524 139.184 101.524 cv142.679 101.524 li0 0 0 0 cmykf159.566 94.1338 mo156.735 94.21 li155.633 94.2481 155.177 94.3428 154.893 94.7608 cv154.703 95.046 154.607 95.274 154.569 95.4258 cv154.532 95.5777 154.475 95.6539 154.36 95.6539 cv154.228 95.6539 154.189 95.5586 154.189 95.3497 cv154.189 95.046 154.55 93.3169 154.588 93.1651 cv154.646 92.918 154.703 92.8042 154.816 92.8042 cv154.968 92.8042 155.158 92.9942 155.633 93.0323 cv156.184 93.0889 156.906 93.127 157.533 93.127 cv165.056 93.127 li166.272 93.127 166.728 92.9371 166.88 92.9371 cv167.013 92.9371 167.032 93.0513 167.032 93.336 cv167.032 93.7349 166.975 95.046 166.975 95.5401 cv166.956 95.7295 166.918 95.8438 166.804 95.8438 cv166.652 95.8438 166.614 95.7486 166.595 95.4639 cv166.576 95.2549 li166.538 94.7608 166.025 94.2291 164.334 94.191 cv161.94 94.1338 li161.94 101.923 li161.94 103.671 161.94 105.172 162.036 105.989 cv162.092 106.521 162.207 106.938 162.776 107.015 cv163.042 107.053 163.46 107.09 163.745 107.09 cv163.954 107.09 164.049 107.147 164.049 107.243 cv164.049 107.376 163.897 107.433 163.688 107.433 cv162.434 107.433 161.237 107.376 160.706 107.376 cv160.269 107.376 159.072 107.433 158.312 107.433 cv158.065 107.433 157.932 107.376 157.932 107.243 cv157.932 107.147 158.008 107.09 158.236 107.09 cv158.521 107.09 158.749 107.053 158.92 107.015 cv159.3 106.938 159.414 106.521 159.471 105.97 cv159.566 105.172 159.566 103.671 159.566 101.923 cv159.566 94.1338 li0 0 0 1 cmykf168.212 100.251 mo168.212 97.0025 170.358 92.8042 176.058 92.8042 cv180.788 92.8042 183.732 95.5586 183.732 99.9092 cv183.732 104.26 180.693 107.699 175.868 107.699 cv170.416 107.699 168.212 103.614 168.212 100.251 cv0 0 0 1 cmykf181.073 100.612 mo181.073 96.3565 178.622 93.7159 175.507 93.7159 cv173.322 93.7159 170.834 94.9317 170.834 99.6622 cv170.834 103.614 173.018 106.749 176.666 106.749 cv177.996 106.749 181.073 106.103 181.073 100.612 cv0 0 0 0 cmykf194.157 98.6363 mo194.157 97.6104 194.138 96.7935 194.138 96.1475 cv194.138 95.6919 194.138 95.4639 193.853 95.4639 cv193.492 95.4639 192.067 96.2046 191.649 96.3755 cv191.555 96.4136 191.459 96.4517 191.384 96.4517 cv191.327 96.4517 191.25 96.3565 191.25 96.2427 cv191.25 96.129 191.346 96.0337 191.44 95.9766 cv191.517 95.9385 195.145 93.545 195.829 93.0513 cv195.981 92.9371 196.171 92.8042 196.323 92.8042 cv196.494 92.8042 196.532 93.0132 196.532 93.2032 cv196.532 93.355 196.437 95.2359 196.437 98.1426 cv196.437 101.657 li196.437 103.481 196.437 105.096 196.513 105.932 cv196.57 106.54 196.665 106.825 197.272 106.958 cv197.558 107.015 198.375 107.071 198.526 107.071 cv198.603 107.071 198.679 107.128 198.679 107.261 cv198.679 107.395 198.584 107.433 198.375 107.433 cv196.931 107.433 195.715 107.376 195.202 107.376 cv194.765 107.376 193.169 107.433 191.954 107.433 cv191.745 107.433 191.649 107.395 191.649 107.261 cv191.649 107.128 191.726 107.071 191.801 107.071 cv192.01 107.071 192.96 107.015 193.321 106.938 cv193.91 106.806 194.024 106.54 194.081 105.932 cv194.157 105.096 194.157 103.481 194.157 101.657 cv194.157 98.6363 li0 0 0 1 cmykf210.039 97.9712 mo210.039 103.291 205.384 106.635 203.029 107.736 cv202.934 107.793 202.839 107.813 202.687 107.813 cv202.611 107.813 202.516 107.717 202.516 107.623 cv202.516 107.49 202.649 107.376 202.744 107.299 cv204.719 106.103 207.683 102.987 207.683 98.5035 cv207.683 95.1407 206.258 93.6592 204.795 93.6592 cv203.428 93.6592 202.516 94.875 202.516 96.4898 cv202.516 99.396 204.396 100.081 205.042 100.081 cv205.708 100.081 206.087 99.9664 206.334 99.8521 cv206.543 99.7383 206.638 99.6431 206.714 99.6431 cv206.79 99.6431 206.866 99.7193 206.866 99.814 cv206.866 99.8711 206.809 99.9854 206.771 100.023 cv206.22 100.612 205.232 100.897 204.264 100.897 cv201.528 100.897 200.388 98.8262 200.388 97.2305 cv200.388 94.6661 202.326 92.8042 205.251 92.8042 cv208.348 92.8042 210.039 95.084 210.039 97.9712 cv0 0 0 1 cmykf211.483 107.376 mo211.35 107.376 211.217 107.261 211.217 107.109 cv211.217 106.958 211.407 106.787 211.597 106.616 cv214.256 104.279 218.037 101.315 218.037 97.3067 cv218.037 94.3047 216.384 93.6973 215.434 93.6973 cv214.617 93.6973 213.99 93.8492 213.42 94.3809 cv212.964 94.8179 212.623 95.711 212.623 96.2046 cv212.623 96.3946 212.565 96.5655 212.376 96.5655 cv212.281 96.5655 212.224 96.4327 212.205 96.2046 cv212.186 96.0337 212.09 94.4571 212.09 93.9063 cv212.09 93.7349 212.109 93.6592 212.318 93.5264 cv213.06 93.146 214.085 92.8042 215.757 92.8042 cv219.101 92.8042 220.525 94.628 220.525 96.8506 cv220.525 100.537 216.441 103.747 213.99 105.704 cv213.896 105.78 213.933 105.836 214.028 105.836 cv215.32 105.836 li215.643 105.836 217.885 105.799 218.587 105.723 cv219.898 105.552 220.525 104.925 220.753 104.032 cv220.81 103.804 220.867 103.728 220.981 103.728 cv221.114 103.728 221.133 103.899 221.133 104.089 cv221.133 104.393 220.772 106.16 220.583 106.806 cv220.43 107.318 220.126 107.376 218.93 107.376 cv211.483 107.376 li0 0 0 1 cmykf228.276 107.699 mo224.192 107.699 223.166 103.576 223.166 100.669 cv223.166 96.1666 224.838 92.8042 228.581 92.8042 cv232.703 92.8042 233.69 96.9268 233.69 99.814 cv233.69 104.336 231.962 107.699 228.276 107.699 cv0 0 0 1 cmykf228.181 93.6592 mo226.529 93.6592 225.446 95.8628 225.446 99.9473 cv225.446 103.272 226.32 106.844 228.637 106.844 cv230.309 106.844 231.411 104.602 231.411 100.556 cv231.411 97.2686 230.48 93.6592 228.181 93.6592 cv0 0 0 0 cmykf0 84.875 mo238 84.875 li0 0 0 1 cmykf0 85.75 mo238 85.75 li0 0 0 1 cmykf0 0 mo238 0 li0 0 0 1 cmykf0 0.875 mo238 0.875 li0 0 0 1 cmykfgrestore % PSGState%ADOBeginClientInjection: EndPageContent "AI10"userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse%ADOEndClientInjection: EndPageContent "AI10"% page clipgrestoregrestore % PSGStateAdobe_AGM_Core/AGMCORE_save get restore%%PageTrailer%ADOBeginClientInjection: PageTrailer Start "AI10"%ADOEndClientInjection: PageTrailer Start "AI10"Adobe_AGM_Image/page_trailer get execAdobe_CoolType_Core/page_trailer get execAdobe_AGM_Core/page_trailer get execcurrentdict Adobe_AGM_Utils eq {end} if%ADOBeginClientInjection: PageTrailer End "AI10"%ADOEndClientInjection: PageTrailer End "AI10"%%Trailer%ADOBeginClientInjection: DocumentTrailer Start "AI10"%ADOEndClientInjection: DocumentTrailer Start "AI10"Adobe_AGM_Image/doc_trailer get execAdobe_CoolType_Core/doc_trailer get execAdobe_AGM_Core/doc_trailer get exec%ADOBeginClientInjection: DocumentTrailer End "AI10"%ADOEndClientInjection: DocumentTrailer End "AI10"%%EOF%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 10.0%%For: (hmb) ()%%Title: (roughtxt3.eps)%%CreationDate: 26/2/04 5:06 PM%AI9_DataStream%Gb!T<M/K01Z!Laemr3eb!XZ-1hA80X_"C/O,n2+]f7@ob:kqOc``r]n8$`'bWNW=gC@Xn?4#aS\N(-0`VuH\-X/g%%l9;CX*T+WD%]=P_'F+""S:Gt--9uq54X4tR%%plsGDqA@a*hUn$)A</X%p_#SW3%2IQp['BUutMA\*n3YG>GCam^KgKa-6CiqhN3f2TIbCgHQdm%3r1[^I=?UN4269T]mSP06NbP^c")<K]R7'_AA^V>r9<&2k2"SU2*JUaqXg(;I`)KeC]=.1h:!$[N`nr.:HnZJ^XFh^[/KgY:LEPH%>X(D8>WuHNhu2;b7""W@P';A_H[@2$[3gr^5Tal=GMc`@]6TRbCaKnqq"3O">56F50AZbTjG21'cp.)&rj8#Y!VASu=o:5#?N,VM%Bdu#l?h=-e.:1uoo40a&d\j7qgDB8;cNiYX)#4!amG",RV]AR+2i4C_om[nabm&ZTk@1N^>eGG>B6*bFp$RT22P48mYOA(N+28K?%]tW@GKH<9=I<GKiR^lP\V?A:1Qg\g8%tD+$INf7V<9:C2m]Udm%H;$HD_?;FeTglh6LalqLGugmP/[<fGMr3CRpt)AT>/"O\GU@@%+9I'0I.;B(p\Xjf_7ffgQb"W;)EOrV&M=fEOr,QFPr?IXH"nqjGs'oPbqoO+8^b=t\:/LIpBc&$H1Un'mI&rVh=g)sO(aE/UEu!X%c"h$cIn%,K#O&LT!p7+2n.?r??QQARVVomc/+PnGnmPCFC]>np,;q\JmI!BpcgIr2mVagAZliZqPBbuIm,-U5OjD%nr!C()h-1a>%s8M]SpI%_S8UWSnr9]'k*8d`Vs5i51lC(oUAFmVZmd;]GG?:7m%GKGF&,(S(GIKTH3r%1?IlTJQ5<h4o4[1qk5!M*3kN+guVt5-S%cMb:8\*)o?r9We:o^(Z*q!@4GSs?X0QHnJm3:geNbat6Oo@(%pe'jN0j3sdPH<LeRo4^7FVr?-t\l3rj:<lY\:/4S[:6&,1:?kD2%aX?<uSqIc,i_Jis3BfYk4$Gek3BfVj3j-Nb3$5'YGT;bBYrfD7k2>J$kj7O*kiCt&kierdQ(r_kNoEnqnji,h*gq=\cg#4-WQ4\1%ellgkWQ#i+Buath.HffoS<f@Z>`ME.je1[t8h?\2ief<7TBEP.RSWKo50>aLS9)h-L[;@j2Oef[cI-Df8]U'DePoFA.E*!a:G1=2%%cVarMl6(j*lfL/<$g[o@Z2K,kb=%`S;4Fi)G\.h3!qO-O@'@0K]%Ij2Agr3chsb,n]1XM='lGbp;ofH]_B]UDqqlbF/SHE*P3Ot%?#eP[qKB]#kF?\7T%c&JC/=3$4gNTRRr,IY#4&CtesZ\.'5;,4bcr=G)&fhQL,rqFD.@:6rmq7YH1gk#"3C[](0YF,Ofo7$IBAUk%`rdj,NDIU`o\&c681"XcQcfDC3WA6;T+US-kCG+T5droTGXHZ;j58\Ks)?#nCd'lSi(qTar7d!rO$BQ8YkcP[a'W,9[bZ'=Zh`UR%/*&qD:L>/bjo2lEWOW!',Q72jl%f:-cjuVMq/#Z#Il!QE6N?iB!Hcd4Y7<aFI7^!ar:XOi0tinPjUT^pB(t.D`n-P9Uipq:M:^W)%r021hQQ?ZDTWbg0YE-^sH<Yk,#;<#9c*eEu@"Q.+WiV>D^A@BnS,4-]o,elE%6Xgnk/PTrYA`:&<kNqVp=$WlmghTA]"7oR[s8F*%r,DB61%skDc1/]`a6tq$^V@PZE3g1aO/*M<q!b)YJ+amNqpXrYLAn?a^Y3`.p9hP^1g8f.`6Z0VjRVHqR]OH^n#j.s?F/hdnZJL1%p1I`'-LtS(gYcGZ^H^$QQBLRSgW9PObb*c?&N!?D]=Y,ad>[uaqfHiVI0Y890j5sc,HIeTo^)#Ch9Gn&29:>RhHb!tp%%)/:Gn'e%I=$Bd72,IH]BcBNS;-pq\+&uJ?[YFN%Da\GIqIZH7G`I3e'"X^dbl5Ahan::\*GWqaQ:=#o(sLn]D.o/5lTkts*3(-8WeJp7#et7%I.3KWRl_hh#lfO`nKDVu='tFrr;4[,GE&8555pf'\U=>Ij4j:la%$XNQhu)J]6h-%U5o8GGJO3+*VfX)iVN,7)[&!Y^P5M]e,/Wq%jMGg_c1\d8S#_>#?))Zl[Yg1=i5>4Hn".nRhsa.NGr_0d*\ZI^?qL9K-h\>eC$dXHH%.b;peQ*p?Z4gb52G,qp*YYrTA;_T)Yt:W%:'Z:<anNPdGU/'*^Xg50%);TaiqR^i!KEYgolF`dqfqeY25c5rYE)\0'JG1!k'm3jh:;DCGB\Q2;dB)FNii'Ts/$M.%D(KL]NBV+%PLd!'If%#IblU)c>]9YW0Rl3HYO::2Cj2C<r`+tmmIH>,mGc37J,JEro&a!ul9F\oGjcZt8Eg)b7e;spU\WmFlKPqTNl_%e.iV1J%pWESc\%@+\h>9?PC[to=mT2<HhYEMUqW@d6*5d]j[ni/CJ,]L-+!4Ehs/R$kb5qN5bUcnns2V8.^RqM$GNuh54TJ&.qUkReoP*,d%5!477J,+&kg%$J_h)oe_lb/O$*d54in"otp9HFi9jek]+m(drs<<qARqooKVqiYc\/q!ZjE-_3Qp6&OmrK1E1IC4@5rbH;ioL05+%\(E4+%r^@]E&Lii]J3]kJ`r#9:N,,RD8*Z1I+g_gs&JbrkH8/N=N`Lmm2j#hcP+XdThbfNW=:<N0jVK+5((rYbF@h<B@-&-j.G'+%;X_f`bH'le++:^\HM;MGqDIoT)8*:fo;uik&RQTHm\B5pgF&GKD_>r\n$Xm[\3+g3mcim1DRXoFrT3:1;*I0,h#DZoHn<U"[l;oW%BsNl-p^9[I)f0Elr"EujG)s7jmrt8umro:\OV]!QMcd=!J%43<]psi%a.M6R/K\1K/pI&r\]sdfpZVU=':,cbkE!sVO>RK(S^?PH%T=hKl2F%%EF06HTCW+3E\"54d3V\,=Z+G:$-bAn`O"UIMVl)?sU&CEnIk+d@`\r8;@IN.+#A/%14e3Z)hR/oJ2ns_V.&OmsdjA[R%R#FV+gB3r9U%K^-m,Gh/O5>UN0q73sED?V(**=:@0pP+5;qu3RZ#]&5Uui?(-KYbf<1,-S<YN/9r#rJ1gLC]!LH3fo5Q]#:1AIR4%l\__LKa!6l53M+g@IiKX`>B(`ETiX\pBJf3be\-M\koF-`W\IoDg!G]M-VM\UdJ@,"P.k+#O5R(3VZYBbfs0BIV1.:GJ(&#r'FM'%r!LulO@u+2V$OoX&d53!GI2$H%qT5;KkSNH:c+>L/rN%kp2j7<o&bH.%um]LJ94?PU!T^VVu<!GUZ\c<29s.X&1hrbcjttf9(/_.%a]oNlX#hkeq*r\"P#$d2MDcHo5G/]$9*PiF2E>l23)cC(i,.?J30>fc+<?aZZ_eptF!t08`9-+eWJ<@+C%U4/]T2.90Ls/-?Tj7Y%ZR##gF^[;T=X10_/O)(R+Hto'3cooW&>PrNQV*&u$m+47KbgHVr#Eh!^q(d4RnTQ;:)[:aP=[E1\Qo=NK.,S4H^o^JU5^_I2BDW\%1[c_E0K!?>O@k^iAI3.S,@Hp&N&8KeZ^#,G6]+I&ZHZ]!1dT^>Wl#5Sb]@2/[I+NWXAM?UZW<'[,?sSK8C.?hb*$d!&^S#*>"rV)%'Z`?*g=ol#CR./+R:i<2)jncZ=1Oq0&^YU%Cn'cQ7km$-PUZOU;*RAu>,n.fUh(\5M&lrP,-Z;o'*O-fP+^Es:PZ2WoJ[j]Q`):'%`$[h^ke/i]!<W\J0!,A.8Et4K1fkV;oKLe?F7dHh=ON]KJMBMBh.H(DXi,B$nR79oMM.8uKS7W2bMs`L_AslFZbff2&,tq5Q6f:i%L)$^+8S]YS)jbORN.`o3=pTeDMNrb[`>f2HjVO+#f#30Q#G]+5"Rh[ipL<jC<l=AK`CWDXp1%jQI;!u#K`sJEZK&fS9(Nnc3o'm:%j!@]?9o)#bc1-tnbMMZ@e7cmdHa,Tb8lde?EnZ/FiJs&f_\O<?ib(iP/F]ako!4iXh]4%:8e2c\H/*WPZfK&D6q:PVQAf52FUdG>%T]s*6V&PD-Y*;l<G_`\5A8*E+;^7m@D[u\Ma(PXd5V'W;Z'PU^JmM]Fk8kJ3(7#]d/U4G0jRp=196qa**r:S4J1U?6%/0r1$>XH"%VARuh[KkOTFNdbuXBK$bcaU`JH/UO'.a?G"Ol3`#I[2^R3/I)--Pjr@VZAFhH$c3g,WZeP-0%F'MZs-rj0l>*=!r?@g:[tlR]Es2%pn\X&S99\$\Q(.S9M*`lp@'EtC[711$OgZ"Md#Z``Q4G0WS]k_QW*/i5]],YHM=4X$gC![hgn3/T;?hmCa-'!5GeVhJ"bAW!MRqG%Mpj04#FL+O^0/F%HCu0XVM`DJ/[+36idpp8/E=jGIFuE[6LUh[_]B2B7Kb@P\b+sC&On=NO9/<9L'9]^$MTqk`b.LJl3FHT7$=CF%@$n")IQh6V&"o$OP/Z&s>5L-UP$ISV@hB5(,[UjC_@m".OY(dHHL)AH6!t;CW?[.\ngUAC/5.CIBribmkK(fbksSeGE9Y>uQ&Q+6%!Y#s_O$:*`cmM^F-+\qL;*[]kL/U46Lp:pufIJ?7!Pm*Z7es"ndDTF[*WoeYoCPfK.a`,@#YrH*,"<l-MU]-.U=,g5l,!Su@)]=l%NYLdF@n6#.73doJ5ud%Qn&/ZRCGLr.k@R(QTQk.H]<Tk>S4PbmUenuUZ%5(?;B329Ws$tMr&V(=g50)`N0]4!\MD4IYH52#a-=Y?%iS92GJS!q1\en9TKr=:e7SgoHK?&OIa,HY\+$%*`K`,#&p0pgEGT!5jqHK;q&3IrnNQ]e)XFBMXNe8M(k/bH@/RF%&LtQs-\V"I#%41*Y$<+:Te[$;mMMTh488*^li`UCc5D\-&6&t_]OUq1iS/UcUj6kbVQM9ul+nU#:>gLCquf7aqFpG1f!@jI$WTJ\BJL'nLdD*mF[%@HuO^Y^MmNXbsqb4-$BOW>%%3^(5dHj)0timpNU>6rjb4KH]h#j0;/<!"#6mINl]qQKRXd_FT1,KF7ZK@tqm]5$/^cg,;bL]i-;*%3iW>2)-UquTMJENO@VFeBi3hc13GX6MR2eT=WEp0^dY0RctcKuNl6r/pCnA=J.*C6bq:LR)8\/6/hN*RYehPWQPK_:2*q[EBlPt!%>,b9C,bf#J[L36("HRF-#3&QY2#B!"lsSL1Cqm3uG,DLBpN=RXk@:0Ad1C<>eM;i4P67u+.4c.#_P47]/<9K`jT*/Lf4>F?VR4#&%WKn;&K8>eXY]NDj_]tKP3SfH>R<m^.]CKp5%H;VQic=^^97SZ-q'G,#4(LRs@-)tCTRdQ0)2V0&Hn9u3&.d^'E7SVt"U?t.>pBGI%YFGU_b7k9M#Njs6P;D>lQ$\12jR*mYDC>QJa4&jp/U'<G"Rq$LFuM\J3r1!E0IP=F-7^ln@kR^?Q]+I"fgFm1r'AnZ[!\fN1fa&"%]#s\"CZn);+]!dF+qkioGD[jmh1p_5U^4oU!SArl*olW!WHEu^%BY,5($&S_CB+L7(MfS9.[r4Y"k-,Y%'^Gj"1X$N..rsqCQl6-%Nuc&X"]!9.7IO#PW6c+tXG$_MVB(WHQ<=h_X&bB/Mu3W"'XL9s-L4SQ'O8b[-3o4]QJg',!F9Ap>jN`qR5g&3#>l[--$(0ZUm5L.%MAi6jbG5pGHEfMkN,>\/eQ$,\PCXfClS'KUN0os5@PDB4a9@X*?@lPL6XH6,V2=9&??XYApInSL"n<>q3iV&qBmsq;_sERDP/BmJ%c/'5b5XK/^5e,#`P+!^:`Mjl`aGE&k@OoE61dU3GOhY4)e8g3WTai:;5Zl(+IIth+Je[EX:QMkTW`VhaL1<pb*;en7;g7Rp@=@CJ%pt<9h+.HO-UcqCQ(#$UgZa2=^Yhg1VC)jTT>WfBMWOIDI53DgrSC<hlnQX'bFW;/7Un9H`:98Q,Sn&6aXEa"eFRm5I6D,SjACl*7%1^P&I#[4OBEOeu7O4TfZirHM-1?RMbU1%=P1oZY37M*f@1P7uLAkBZT/3dYR&LtU-:KV6T8u1RT7Zo#b[g*7m_'%X[MmAJA6P3hf%i0gZTi>(Zqj_uCfr,1qu_2%5$Xhq$HoR`EF#+T1K>=D'l=\t.S+\O"cbW?oN9nA[boWoi@j(9lBAd?+-$LVYhM?o?L`JI=0Z'\!o%L3s=JhG+J6'K,:!o*h@,3AmkWd#]jRO[FXbKEO\t%C%TI2DF.CLP%6\72uRH5E";^KSSJoXLu99)10Jfm9I*LB8#2S=TIN&LYrsj%!O6bqYc8uAA-`QQUa'Z@W@nuVK1V!r`82[u4&1AsnlCD<Ek/Dr&E[J-+s>4cVY^7Y>'!5Ef">aJ*6I[2J-0!V4u5ZZC!=FD)iWnJ%\J?h&Qh-%N-N+lo8E=]sW8!.n1YX!&g4ufQqi+"!Na>7/13(NZbVq9)TG`)*)WAmL&>\1b64(i+@44s=6U;3468iXM,2Wo]="f(h%b8C:uIr9PTd_R:4QE[bb/fP7*IRi1Nhm'4>!'EYf9l?d6Teln/O9I)Lq"E@U.RcTrQ&Lj7=(LRjm50cY80<uL:ddjs39asBP0.6l%-\i#dW?PJ579#t%Z>'Xt$TTBRgTWKpBaBTRAuuuTqQ5lD3fOFVcr*V1nL5>I,\q!)7c'S<WGodVbm@>pH!N1HeI+=0D;/lINY2VO%B#5=QZ(2BCqRjrWFEpP`Qk[sODBMY)olGp_EP2<<@jFO^>P07>r\Xl0.p?LAf@\edIjo?F.nNNX+@QKfe=gj->8nGgf<auS3f,TX%OY`%K^Q2E37T(I>;&VY2R@@$Q?`>5C"X=f2Ton?SS.7)Y0lp!ZPVFDSB8bX0]L$.V,&)Z:WRgEX9A!O+=D8e<2(X>BWLE2"L8&q9%bNk6-X`gNJfVhUU.ARJMA&<o5Z3R#+qWl#AM#HJGcqr@]Z%SP\-lSQ"Aa[,f)AA(S'PpCJ&-V>26\SBB,GN%EI]C+2:BMIi2ioAS%-[QOXVqA3sJQ[gXOc]DIlBNgH;mN$H$R/7Q,)NrS`^M(^(T$FeZqJR$$8WKuKg[*1;mM]D<"6@&H\Be0/h9p3?%P4T(PN8h<#EYO%5]G4[9-Q9*93O^cUI!1";'cqFBT\>-YI9?3&k;THBrXEQ8ThTfRO$?dlE<Q7*W/OKr+@;)B?1p]_AX(MBtCCb%#"g1Vj3f=Z:]u]%3\3]_0k>]bCVlHZB]HE_M9%_^*HQf10GXfd9oLc1U.h=E(6!$t3E8Z5%L`QOH@@Qdb(-rU0T\j*9LP?/]a@2n`.R$';JB&ESX@Ia%&uQDJlVO%l'W[8J+C7PAhOTka+PrImjC'>@lRWJqH=!Dgem]fMqD"8%!tBu/6q2ba@4j,o8+3cf`Et;g_,b0#;-_6a1Mke'5=B4X%,9HKAVDN@Z=N\kg8"XUuddf7`Ac?A>fB1*^+JD1j>>;uU7[B<s]h)fO_N4pMNd$[&N41fuLeSc\Srf,HHdTKXN9N)*<D/<Hruu)I%eS-Z^B/-BCMB(13]Pa]Xo<>Cd_m\8k'9_eVpjJ*;+Dpbl5:h6e+f(f4=,qTZCH43d/6*$-_Rj:2qnOUnYTeh#cJ]DKe@ZQLF=8Ab%>t:>\<3HTmP4'.jbO]2^,(^XS0c=-4]XX>i?2ZH$D-:,OUSs@:Q<DmKYE3BG2#Z$k:$2A#1GakX8;c6/9uCX@9nn'!cgNA^@^tMD%4C4@V<i?PH>-),B6h5eX9u:7PXu;8*/7URqki.:.@`).SG)=Ql)EI%b/p]<aLmTb'A&P[Xb"1G)hKiTH,4gPZlo&g>,MPiu)r&(7%9rMQ\/?e/`$<CN8lq2\\6kkPM>6>Nb=c0`$;r(=V\2$f0A\p2l2R!S/C9Vi/ZIZ$4^&n.).7fC=!T[F"qh!=%:(!-(A>1CcS1Uet%02f)iGZN)S&Je3RV5Qp+9[W"/^`&TO^(8u]^8t9<3EXgQKoFt>XRRDkSN5@;;2_tg^![=J-HauSS49]TQm0N6PAPU*0LleA$W`>t%Z<eD3Yb89DhW.2L.)f-P)W?9&=so#`(&;!m[iEMI,Y!ACJoL\>5bot=G(QSXjs"ANahrR.jORP"</g%Yl=I"6k(Og/>?V!K$8i%b%C,JB'nB0`)(EPs2E#!"<(l3.5P4E-1+;tI$q-!*d'#kS?(lH!N=p&MOJ?[e.Ad2A=26BibL)Le[CI+C7//ZP<\)b2f@HnMgQUUHN%,<nZ@B8'iqIj_S)g6Jen;Mt28.a"I/:Ea"I2($b/9jXI!3Zs)kTEa<C>cX-!r]6Y/"D-4"Md[c";J"#BjGIaMeLfFkZ:pS'%L"XG%.1Jg=.,<D#Osl:28oL<fdBCm)L$9J-.NJdnoNW]]qrQ,#M(oW:6b%_Re*nuILj6/:&?mAuEa(/,9a"u!_+=9^OU+V&LkT!saKkFP%Q#g'#\g:OYl?ukXDhq7W,#5+C#j.K!/#"peCdtXb2<89YCO5OY7DB]T.Oo_?Ya.pa&C*3g'&8Y8@*CJ-KsOic;B2/:'O[cB,cZbk%q]WV+S%H.c>R<(,B_'YR5\paBeccFD2uc=Z*%\;CZ6tgMd7F#;1a]aUZrEgC@BliRFn$P.)V6c0NQSYjVgF..H0jacp)ejJgj2[`%MV4feI;km&(2_5poN[fp:e@J;HbLV>Hjdr!i0LArR\)ER`\7<N0NUVIWGJh7cV/#'VOg$InKuI2((aPN%lfKd86hu;Zs[anPX:ho%%:nP(-:Y:GS<m]9JL/u=?k+P;r_eH0RQSYWWd3Zi5f>"g87,a<^;^!%[C!Um^X4_ZV<a<'S5_1#7[.9N))W$rG&Hia[V`ham[fUe%>Rt2<jLpGBj*d*tTYOlWo/bBhE1rrM.0Tu5!CWO;a`:cP"Xsi/E]L:+T.&RhH'quTC6YZN!#rc6!-CN37ZIgiE?`V[TW&-ZVI1la%Lp+Z`aO*oV.\-scUGbq%(Y#52i\d"=Y)--dO-"%m\i^;ZSMEXq8+bLR$8^ldY=""[e>j8E0tCqtV;hpI_pau,!A1.%;:q\@&9h\5%b#*1^WIf!?j#/Wj@8-"Rq&+G#i^Bc(dq]Ue;i5oK._`sc6_G.AA8WN2FUehR/6)Cu`\M_tUb1b>F7ZV]JB:I#W#VB7OK6XbkEqFa%Sb(j0nE(\@.l2/fZDpi;q;"LT>+u3uVSeN.d`EZe[U+$>kF<M-_hsGp!_p:^*@I4WKht$HWYFk`\"R&aJ2/7=6b$J_'QhM8Dkg*p%'YB/a)3,mZ%7DEg8-[SUKk>Q:Oc88:7CeI+@RI5hA.#/*C<0th)p:BV:<4:\_HXhYOlo>S\_08;cDIu0D6,6sPLQ'rN;CnU7Udsn%j+BcK)`,T,^WF_7q*a=9R8GN8gW3S3%S5ssG3_,Wd?-"&8ni#.5t.g+Z'u^YeZ4e/D5A_b@0sXe',dDg*d7pe'$c@ejKns5(Z@)J%*ci,g/Z1"^D"M^YGCVVCAR9Ch"6r^?;)R@l]/Mo2W's!7@co#Vie%=M*>doJV"MC/A7MAAi1e/.*%Q*t*pO$<H?7/\RH=Od%KWQ6%GorO`=:ib?a`@OtgOPT1Q(D&toef&uG<,ElFc6hN0Hs_L?C%;7(n*JtGqSr&=/sVtRVc(*#%%2]3[@>>+`^,u&gj4->$.%Z8IVuS%8Acp=lgZ/tiQ>=FXN,lJ83o];j$9%IfX<pk<&A`&HH)ruH"ht+Q:q]7JUD'lVF\-dh?c1s]MB.tfKcXC$TZ8h^^tTnbjjiL:7S#p%JKkX=H,JPjUa<l]EMd+lLk'i(8\r52//R?1/=5R),(ZM(klIDq@hn@blA2n11.8Y_Xsb$Dg4Z&=&Lq!qkcBBXD;W!*OJl'm#reJ9%[>HZ&R_T6CMOmDD6(Wn&9&gOXVrnVjK-7Lh/W6NkT*"N%aqW!,@6hi0`&'b<X'9]U&>,Bo-(f4)be#37!Mp$].gm;HOTMaA]8=U=%A5IlTC8[,CYQMT^Ur-aq$qtf-kD`PVL^i<">$oluFI]$l;CFB!aEWKga>bj2=4Mn$Mp\\,D"!U')>ki"9?)Ugg7o6jZnYG2oPK&#%V*$hS90OBHV`]k>6Ug:]bDmqniBabCehokDKH8b:F2_+j;AGV"ghPsu1:CR+bi9ZTOIU/e4J,.U"YJ'^fOGV),6PAK0cuV?DOOVj%_2(5)asIf;kK^R\GU*FeC?70.JF])R:,";p&l.t"THVk2(ND'Q.Gu=*36_%gN3ntk&"g-ZX:'a,H2rYqG&hmQcl#lGdXito748R9%EkbUPj1MHJ/X56o,nO6'7;(k8'jp6"EoL'#Mb.chni9pf6&<QN*`NaAM=7\]^*#R1V_Lr1!GQO^9=Fr\26N*akiPbcJFSY*bLVdD%mc2AX"#DA19kDEdlYNrgl8tR$hK%#PUaRRTOfEHPP![1X'\8X:/X`8QSg\";0!FW[D%J_/<&(bnr\cDmHIT:aaH!YkfJ^c0/Sp$)%",?seikLotPmf6/7;<r4lio4;!a]%8G-qFB\u6h6>E*dO5U-oiKQ]k;%X`d1<Ik<=d[J&a$=ptn$W)2;'p/3+qFb;&?tW5+i\a&o%D1MbGcGYtrR&!?9(8M1t)O!u2/U8?K"6!a.3bSstNnQ"`+K%i/iXKj3P!\XXJl]?W@8D/?L4q1D(!HL.)0858C;&5n(#0%FU3GJ*%*W`7)dp)9uZL/=4R8+*ZGQfV9Mcu8+)?p^ULr`\0G1(*T7.,TX9l-t9/gUK4H+dA/0Q<[^@o%!<6o0ApXR7VPle<u['dV%6ils?N%L%)@$YnGBVY/a$s1Zs"C"r4^9j&cTk3At'Krbr2uXc!lN3jt9<aB-(/(!os4Jn.pajasJ`Ks5I2gP7Cs)@36:>ueKJW8I=^r2:uK%:NAIYD7CmFf\3aBllPXAjL..f3s.V.1$?YQQAZY,KI*nedN\oA&:DEN+j4INWs$J$3b+ef"`(Ea$V^85OmPUY/<D:;7b%"dHpB"D%N<'X^/Gq(t3I\d]l'jXe+>Ga/]="Jsi$;:KR#RrOeZc49-IUFPi)B$DZCLmY.Q'UCQ(MeM,WXt]Q#fK*.AdFo96<]9T.K[C&cRIs%_b.leb#?YDdNqUt@\V54.pCHL"3r;F;<t]`-n</jh'Pcf#j[ARgN]m%Y"@0ogMD]TPUo])^9/;#Q#/CSZR(<anL:PZJM_\qHJ&e1%YPIFS<AX2+-W@[L)2AWq>Na>Y9t*%(#ZL[G$3%/sd31*tbY=KDaH4#b9[ijTLd!nk11_3n$;QP]_Y@:^Q=%P[QE=,VV:TA%#c8_G%c(Oc:[QLU(<?PhJjZ1U*.S4?186?<ZBW<8S[V%ja_nY('fdAdmA]5rS3(b/mh'CiN`;+P#BF8`]o'N[dO]of6/NQ^+ZX*j*`8'n0%2Pq=RiAk/.Tr?nPA4[o5@Zk1.&D+MHRFgc.-A+h273e<d3nZ;H@s]jE8OBAE'OY738&Kku`_YKSAOLq8?BsOFC6>>@`GrH"5[9KS%6R"P\Oj2?GX%?HuAi<N(TWK5rCiiCUoRLi`;DfoYd:YA"OPD?:Yf49u_^[.;RDj>O<uJKK.Zq;Fbd'IF(sf^,+k499d[@8<:kJ!j%#nhAX.k4d^;=gfdU6jV1(+Ls7;r(Kq(nAG]$`GB;FA5-pEY6L3@-$/\`?15[l\]%3($qN;V7L2ZI)j<-<:GO95+r^f0F(KQnjC`s%'\r"Pq?t<=d&@hX!+AB;PaaXskpMI`/M!)6$Pba0]d<nJCrL7n,R%#H3Z!^4*deR7J1FN&69*-%_^J(W-Dpok8IA4_`k_^%chO@]%pFKQAOOe;8R%9(taP)6=9%\jJJg?kS9e0)cc&>7`MFP/sBM>3*%2kq:%#F.*\m=`#/8^_eQg7gRcj92Dc-L0*.DTa,WqHdt1ont"%J^MXIM6N]sf]iGOLm1CXV\2G85.8C\j8#OeV=2oS8IEr-0`B9KT4ShqAe_$pA><1T#q'O^;(@`i]EYuF"Xu*ilSFGjca9/;;38X3%BCUcOLuYmJXOTp((6V^Z_WPsmbftGJ`[#'LW^u3LZ4Va?9mD@lcM!6D'Xd3?'lOO6/TG4)W^jmEZW*KVH5+BqB"[bB;oo#ZLrX&f%C7jj$c*1=&;%H\rrO3]?AW$;O5hfKJP(RHtW@4[FnKVrk%jclL[$\h-P$NAJ%/?ia/YDMiTh/:[b&YT(,FfK6[QV#:]7-Flmh]!?%E(p^jCpPD4.aig*`7XYM7[+2qlh7''_DL?J7/i`E+s:qSX\*D_K&bR":`EF%7^RlN)F1H/Sf3\^Xm+i3Yp/DsB6Ho4,ARDGM?G]m%g5;-.=fq`7AKil3'MSg,e]ogDNBf^1P?)amGr)72.L>+8P,b>$(WBD9.+1HD]sbQ\(^aqCimskBUC1O^0R";/9[8sQjfmsE*E@p^%en64fUG`1,ARj4E.7S%c3-"8jOaFIB@um*TduoHV89aDJdT2EX:=YD!XCoR1,2"[nY,ipUkZ@/^)Hd>*nlgoCO+@\iXsIE4PqH%O%jE[e!NPP.[MiZpJERH\/9hq$5Br#C^1a^m1[+%a<,S*>b3.oVb<C=h3eI]Z]pO]mj[r,l`[.OM-6A<cC#2Kn!P1$]27Cg0!;;nC6%W&h)34uriR$d_SS?EjeLir!gh_!siji>Ioi4o*1JJo6p`1Xi7^*VWUJ-3Y[!VDcJ_Y[`*Ofb>l4krO+tPX:hc%A\jCaW:O,(H^Q0%)lkI)DDg#"dtkXM#Zlt`SeX2.c:!JN/Z]Ci]BAtWWtq;7F1-IO6<\EB38!SD]clt]iT*mN\)jY5W`c@j:bbfCK&AZ=83;gB?m6%n%.9J1AfGWg-AP0$0P='VZau@@W#Uh=%Z;K-tDY^^G>E.Kl6eo:aM\3%:^ZLbRH<)L%6k3>EN[nWK:LT4h8M59gN5?b:]P7V'_CIR?%>_/g8-/sB\[7V%cH6MK=-tJLAf9K/ti``2b81Jq@81C?kh*>QqeA0Sbg;M]*/;:I+OgA!XW%G4l>B(h@2]bZ?!>bdt/$=U2N3^XX%>%tI?:6PjI3O_HsQm6Ot8gRKL_aJ78gJNreZ,MH5p<#i,Ts/UGg0MiJ&IG0@g1mC1`cR[3,RgB<<*f!+9=-g?Y,-'[0c;"T?uNjB%V'UhSi@1i_TeGcS.-t1%US4t5q&ZYl.YXN/Z[Al_heh].f9OdSA9cA,Kq2JO$7$qf-02H#e:CPo"u=,7+>a&l6GptEY-pF\1P&MB%GPZZ.<,J[8*YDAZ;ELQb8/6=V)=_'["psDWEY>:JOK*$X&k<:#,<^aV0hEO^-*G6+>ctU(6"`!^giYX"Vc$(9p4>*nUt"^hOAmH1%*],3=0j4ob8K5Fj]2ej1R0S//r:))O3_[P9Hp+ShjLnj0Xf,&l(RF0:UV_::aPN6SZG'5oamD7CLg&(+'.s9aDNSJ*o(pIq0(6=m%`#DZ(<O(gW$'9=nF_6aCG&XbD9BJT[rEqPhE8X%'Fec96eane!3f1e14G(^!eKBPt1HU7G-W6']F%EeJfsY@Q6,f1"c6O#G;M(pS%82]CAH_!Xc9;dY`)bCqS-^9"?(q-9']J4FOcq#A^WIkFH,LOHg9^]2@!/rR<*W-&G,`$D2Ou80a"*.6\3<S8Ne#Jp,>*('9$c^W3%N>J.P`;@G.\\hNieZi5YD:<eTW#=tmT3;l,B":WVME/C2^o!_j`c>$\>I:p]fU3*d$HoDjVE@A?:pZ[^7maCGY<_23&g,3cC',-q%iD>i,XAR:hnY)nkkeSN')Cf$\g)VgrPOq2b50G51fN.P-Pg:pkih;B#$]s(d-92s=BmM68B7\!ZSZ*lBTmDt(!lDPt,>!Q"-Ge)'%-&nb!Lg$s)1k]VhWa<0r)pI'!`L0;tXrXL5SQAd-J539-d@$dHX;NrlUXhY0<Ub+RGDp+T&s#XODb>rTH`[=1G3l&*&pdel<KeoD%JpcaiA^q1.JFJEW;+h1Jo,aotO>5XqC>k6j#_+YO-kcaC;l`N,`Iu$s[pc,=eI075KF?4c#o0?6).QL^KT,O*mB)c&bFNjZ!0=<X%Sg/,qK$5$DQ>/`o[+_%I.QnhkeV&hCURKR$-"nlhaK1?#*8MM&#d0JS5-"c+\>d-J"1Y\+OKXi9M1bM4D/%*u-O?L^?T+pQ&/Vts%.;J*H5\.0(25*?+2;s.,2'H/,18UQ+',f>RN5[7`;G[c]X/ZK:S#dN?25/VZ`e,bo/@RWIR!r#^cY>edGb9Cb'/C?)&o8\<%H+03%`!(U;5JF-EPl'El.`AnpfF3$>el#HSBk]-Ef?2ZFo,t:rA%f+*;dr!]@2ZZ^5dKaW:Xb+mrHmsu*=F!;%JVc,(/hnPl,)=I&<!F-%m2TJWp(sNo7ZFZaieECU=q2fX]0ndFH-djm@#Eb50cT\(^-m6s^t`r2&`<#KA(E573MWjlcLrK!K?E\[J?#:LN585eEPT`!l&&-H%l'>COU80BjPq#;5bR)!q_3]<,>cZACoBTSOC!(sibJR=`FK5-c:BMIi2inX?]JL.>4X?"X]E)2[\@Us+@E$Fc'p#[<aXOVf5,*Eh%LK9)b[ki<##Xte#(OmsRaL3Q>lPT%?0jp[KEfi%Xb%AK%+tIXU:dR^r[:FWZ)M;`O!F?9)fj0K6C<`k7K*s5J'o&4j:9Ah\a(9.9%.1Ef*q3$;Fq+D[jYL?J3$HNZpZ!FOm&R83b_E+pSl,6rQ^kXMp4qk9CV&##?CUcd67R]2Td]Nk$3P,4'5e&Dp-JP\l_QN:.`ge$X%@YAYC_O[a,Y!?Q9.]?p6(5,[BDM'LFAWXKD7KF<D"Ac&M8sfC*(ltu$fQQkL3!CJH2ZX&lL0oa'o&=V.]^<7Q.d)Z0F.RG8RS*:a%a#%S-ZjSrQ7LLnAl_.Grq3m$LqV??]mRD'lPX8HA[L[a/Vj7.DOrPn?>j^^PV8ZA%/pa&](mR4(-Fti[e8r3MpI&52\EgNaZr4kO%a5Q;5,`.<1Y2gS2h.1e<#Y(\KY=VUt:'fD(hoAj&6G1ZIibtqq!)=m&ecg4UY_adc$-$(bC61*0i%G4)73n?U1\9#8R5]8V)6d.h%f2Sd5Wlq,o%=kh6W"K"/9-ufsiih&TJ^f:9k5B$gU-c4nZHB4"4m9=&W*;98.[48rfSpIdcD2c@a7n9P(m+3)c/.c@O="7sIDABY%i^tMTBQRK(I<ZYD-D72A&1`\HE2.`RUTkJjf':[i+EG&;9MA!jqQ<s^=oQs[g\+l_iS\W;nQHM!Wo6r]\rN47239G6")+ucZ:E`U%m7Ub<I=f<la=l<u%$rYZa7oFjarV%H4]`0'EXc?3O:L@8gJi,@SEH@(FtFnFh?"tQjsi)0cR%>gWs0<jn8dinqd'iJG<h`=(^F=$%;Uj;P!m.,^8TOCM:YaLXZgDQR\C*_'FnVm@:oo&&QeZa8:ll]*gmTc?e_"([E9,DcmCQt"$p.hPg+lZfWcoBtZ$3JsUSqI,W;&oG%>A&";$NB+tjeNGMLP9:UW[\[?QIrkTdX6Bdm^:gN/a%e,\M";$J]RM2Yg^$Q9=/C27,$JEEc,2\a]W)['R7P'EM:>Egq^E\PEF]r%Um8H(3AbLs<fk@l'M:5uNWD63SD#Dt0WL[,Bh89@-CZlX(I+&.=eYqNaLu!KhW<H$NUjQP@U@dA[VfZdCbgaa(3(4\;hs\g3brr>%]j,he?B7A^?k3j`A^!ZJ6NGV*\Q0Heg1s!S*-kOd1E"uZ2<p\h?ZBn@g0VR9=YBChAbg_1E\NZ0iUo$iihX.SY#T@A98VXiTUHZ`%l45bZ*jop',EDkN?#jf&Yn8;X`[`20SZ"f*CS>Aj&rtuNb>\Uc.)uM.h_i2u(r![N+^TZ;eA+oZ!2/_&HajXX`Dg\m]-6R2WUT9^%$^GeD2<8_A3tP=s]ZufYmu+B&H:'miJAK=>%&E8cbB!cLquU'-?Ki9oVe[`OFtk4D2)!7j*Y]H-8e"rBO^pDOs-0(%GMo9+,Ld?=%JaMDaYQ\NJeiVH`YqbS3mY>t0^mn5c+#L_?2n2JN&2'"5D;)[f;E6"*\DpgEd1JKA6pD.IK!?$^K.'lbP66K6-G_9^%bK8'&QdF2%kp,A:k#`1s'L?c`P05Q(!,&g]D/1`o*TP4k2Z(\N'3H%'L(ZbcZV)oj*&On`=TH035p9*#27LUe``4JCU[ACgQ3-]ioXb`FmX:l[%'6f=LeU^i[[m4)SA1R*G5Yh%:+8K)"FZ2+3RC@QF]^>M.#sEPV<S]O+&0,d,XY_`5Odb>=h1F2FIHf?B/+J9f=n@a-qr,0=YUPOS%pCo@lc+p!r:_DmdP(9Ch08B3P6H0LRBug'piSF(4psJhOY%/I?S[)7#"MUm$+\&o\j@dl'K6($IlW(YoBl%SUFo&r.M9'nFH%"rd%UQB=_HpoaKl2e9P(%V$@P36mqV"pM89"X1S3rNN$gMt1qfdAsJ<L]UIK?!WMK&%E:CJ#irh)!3./X-ho4fsqN>:F!bT=oY\T_u\n%h0e_Nk)]OgE,dGdj*l/q`S\-'d74GF?G4(#Zhs^=jn6mdiS_u@jnHC3jk\bke)f'H/UapMo<<Rh\pr@L*l#>e!=1j:a^;_Bqr7P3%Ifi\TQ7i~>%AI9_PrivateDataEnd