SYNOPSIS
--------
sview: OpenGL/GLUT version of sview_2.  The code is made with C++ but
does not employ any class definitions, just structs, to ease backward
compatibility with C (NB: a recent exception is the use of STL classes
for point data).  Sam Leffler's libtiff library is used for TIFF dumps
of screen images.

USAGE
-----
sview [options] meshfile fieldfile
meshfile  ... specifies name of NEKTON-format mesh file.
fieldfile ... specifies name of NEKTON-format (binary) field file.
options:
-b        ... start without mesh box displayed
-c        ... set cylindrical coordinates
-d        ... dump TIFF image to file "sview.tif" when quitting
-h        ... print this message
-p <file> ... specifies name of SEMTEX particle file
-s <file> ... read commands from file
-w        ... white background

Standard glutInit command line options such as -display and -geometry
are also available.  For example, in order to force placement of a
400x400 window at the top left-hand corner of the screen (without user
interaction), use: -geometry 400x400+0+0.

FILES
-----
Nearly standard NEKTON/PRISM/SEMTEX input file formats are used
for the mesh and field files.  I assume you know the format.  One
slight wrinkle that has been added is that the binary format of the
file is now specified.  The code detects and inverts IEEE big/little
endian, but if this is not specified it assumes the binary format of
the machine.

DATA:

Example field file header:

swim                      Session
Wed Jun 03 15:26:16 1998  Created
9 9 32 206                Nr, Ns, Nz, Elements
6000                      Step
814.2                     Time
0.0025                    Time step
0.005                     Kinvis
1.0472                    Beta
uvwp                      Fields written
binary IEEE big-endian    Format

PARTICLES:

Each line of point/particle files have form:

id time x y z

COLOURS:

Isosurface colour definitions can be loaded from file colours.sv, up
to the maxium number of isosurfaces alllowed (IsoMax).  Each colour
defintion has four numbers, specifying red, green, blue and alpha
values.  Alpha blending is on by default, but can be toggled off.
Colour definitions can be reparsed by typing 'c' into the graphics
window.

SCRIPTS:

A script file gives commands that would otherwise be typed into the
command window. It is parsed once on initialisation.

POSITIONAL:

The script file knobs.sv can be written ('k') or read ('l'). It
contains positional and camera information.

OPERATION
---------
On startup, the mesh and field files are read, and a window should open
with a view of the mesh block outlines.  The first field in the fieldfile
is read into storage, and its minimum and maximum values are displayed
in the terminal window.

There are two command interfaces, both of which are keyboard driven
(the mouse/cursor isn't used).  Usually you will switch back and forth
between the isosurface display and manipulation modes.

1. Isosurface display mode/operations: commands in graphics.C.

When the display window is not iconified, (single-character) commands
typed in it will manipulate the view.  By default, arrow keys and page
up/down rotate the viewpoint around the origin, and +/- are used to
zoom in or out.  The home key toggles the arrow keys from rotational
to linear motion (linear motion moves the mesh origin along the three
axes).  The motion model used is that the observer rotates/zooms
around a mesh that does not rotate but can be moved along the
Cartesian axes.

Other key commands:

'a': toggle alpha blending of isosurfaces. 
'b': toggle rendering of mesh outlines.
'c': load isosurface colour tables from "colours.sv".
'd': dump a TIFF image of window to file "sview.tif".
'i': toggle inversion of background from black to white (default black).
'k': write viewpoint-setting commands to file "knobs.sv".
'l': read viewing information from file "knobs.sv".
'n': narrow the view angle in 5 deg steps (min 0).
'r': reset view.
'P': toggle drawing of particles.
'q': quit sview (also in the terminal interface, see below).
'w': widen the view angle in 5 degree steps (45 deg default, 90 deg max).
ESC: iconifies the window and puts sview in isosurface manipulation mode.

2.  Isosurface manipulation mode/operations: commands in keycom.C.

With the display window iconfied, the programme goes into isosurface
manipulation mode, which is used for creating/deleting/displaying
wireframe isosurfaces.  The wireframes are created in isowire.C, which
is now almost "stand-alone": the only external structure used is the
"Iso" type: see Sview.h.  Commands are typed into the terminal window
from which the programme was run.

There is a help menu in this mode (type 'h' <return> to get it back):

-- sview help menu --
a                     : add default isosurface to end of storage
d <n1> [<n2> .. <nx>] : display numbered isosurfaces [Default: 0]
f <c>                 : set field to <c> [Default: first field]
h                     : show this menu
l                     : list available isosurfaces
m <val>               : make isosurface level val with current field
n <n>                 : invert normal of <n>th isosurface [Default: 0]
p <x> <y> <z>         : specify coordinate rotation
q                     : quit
r <n>                 : remove/delete surface[<n>] from storage
t <x> <y> <z>         : specify coordinate translation
v <angle>             : angle of view, degrees (0 < v < 90)
z <zoomfactor>        : specify magnification
?                     : report current t/p/z state values

At startup, the first field has been read into storage as the default,
and any isosurface creation commands use it as input.  To switch
fields, use the 'f' command.

There is an array of Iso*'s (called Surface) in which surfaces are
held in store, and another array (called Display) to which these
pointers are copied for subsequent display.  New isosurfaces (created
with the 'm' command) are placed in Surface[0].  The 'a' command
appends a copy of Surface[0] to the next free location in Surface.
The 'l' command lists the isosurfaces that are stored at any time.
When isosurfaces are deleted ('r') the higher-numbered surfaces (if
any) drop down to fill the free location.  A maximum of IsoMax
(defined in Sview.h) surfaces can be stored and displayed.

The 'd' command de-iconfies the display window and displays the
nominated isosurfaces in order (defaults to the 0th isosurface if no
surfaces are nominated): the order selects the material properties for
each isosurface (i.e. they are chosen in display order).

If an isosurface's colours look "inside-out" it is because the surface
normals are aligned the wrong way (there is an binary arbitrariness in
orientation).  Use the 'n' command to toggle the orientation for
subsequent display operations.

A script of isosurface manipulation commands can be read from a file,
as specified on the command line: these are the standard commands a--z
above.

If the command line option -d was set, the program quits after the
first display command, dumping a TIFF image to file sview.tif.  Since
in interactive use the default first display is of the element
outlines alone, this option is not very useful unless employed in
conjunction with a script file (see below).

EXAMPLES
--------
See the examples directory.  An example mesh and field (tg.mesh,
tg.fld) for the evolved Taylor--Green vortex are included, together
with an example script, tg.sv.

usage: ../sview -s tg.sv tg.mesh tg.fld

To produce a TIFF image called sview.tif, use the -d command line
option.  Together with a script file and command line setting of
window placement, this can be used to automate production of images.

usage: ../sview -geometry 400x400+0+0 -d -s tg.sv tg.mesh tg.fld

For use with mscope there are taylor.ms and taylor.sv (the former is
an example of an mscope script; the latter is an example of an sview
script).  This is for a 2D Taylor vortex (invariant in the y
direction).

usage: mscope -b taylor.ms

PYTHON
------
Ron added some bindings for interfacing with Python (pending modification
of python).

HISTORY
-------
The basic marching cubes routine comes from NCSA.  Murray Rudman wrote
the original version of sview for single-block meshes, calling SGI GL
graphics.  Murray and Mark Thompson added multiblock capability, and
the original interface to NEKTON meshes and binary data.  Hugh
Blackburn ported the code to OpenGL/GLUT graphics routines.  Ron
Henderson added the script interface, some new commands, and bindings
for python.

TO DO
-----
Arbitary number of repetitions in the z-direction.
PostScript output.
Python bindings for GLUT.

BUGS
----
There are still some problems with isosurface normals, material
colours and lighting.

$Id$
